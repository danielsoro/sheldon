/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.tomitribe.sheldon.ssh;

import org.junit.Ignore;
import org.junit.Test;

import static org.tomitribe.sheldon.ssh.ArgumentAssertions.assertArguments;

public class ArgumentsParserBashTest {

    @Test
    @Ignore
    public void test() throws Exception {
        assertArguments("one\u0000two   three", "one\u0000two", "three");
        assertArguments("one\u0001two   three", "one\u0001two", "three");
        assertArguments("one\u0002two   three", "one\u0002two", "three");
        assertArguments("one\u0003two   three", "one\u0003two", "three");
        assertArguments("one\u0004two   three", "one\u0004two", "three");
        assertArguments("one\u0005two   three", "one\u0005two", "three");
        assertArguments("one\u0006two   three", "one\u0006two", "three");
        assertArguments("one\u0007two   three", "one\u0007two", "three");
        assertArguments("one\btwo   three", "one\btwo", "three");
        assertArguments("one\ttwo   three", "one", "two", "three");
        assertArguments("one\ntwo   three", "one");
        assertArguments("one\u000btwo   three", "one\u000btwo", "three");
        assertArguments("one\ftwo   three", "one\ftwo", "three");
        assertArguments("one\rtwo   three", "one\rtwo", "three");
        assertArguments("one\u000etwo   three", "one\u000etwo", "three");
        assertArguments("one\u000ftwo   three", "one\u000ftwo", "three");
        assertArguments("one\u0010two   three", "one\u0010two", "three");
        assertArguments("one\u0011two   three", "one\u0011two", "three");
        assertArguments("one\u0012two   three", "one\u0012two", "three");
        assertArguments("one\u0013two   three", "one\u0013two", "three");
        assertArguments("one\u0014two   three", "one\u0014two", "three");
        assertArguments("one\u0015two   three", "one\u0015two", "three");
        assertArguments("one\u0016two   three", "one\u0016two", "three");
        assertArguments("one\u0017two   three", "one\u0017two", "three");
        assertArguments("one\u0018two   three", "one\u0018two", "three");
        assertArguments("one\u0019two   three", "one\u0019two", "three");
        assertArguments("one\u001atwo   three", "one\u001atwo", "three");
        assertArguments("one\u001btwo   three", "one\u001btwo", "three");
        assertArguments("one\u001ctwo   three", "one\u001ctwo", "three");
        assertArguments("one\u001dtwo   three", "one\u001dtwo", "three");
        assertArguments("one\u001etwo   three", "one\u001etwo", "three");
        assertArguments("one\u001ftwo   three", "one\u001ftwo", "three");
        assertArguments("one two   three", "one", "two", "three");
        assertArguments("one!two   three", "one!two", "three");
        assertInvalidArguments("one\"two   three");
        assertArguments("one#two   three", "one#two", "three");
        assertArguments("one$two   three", "one", "three");
        assertArguments("one%two   three", "one%two", "three");
        assertInvalidArguments("one&two   three");
        assertInvalidArguments("one'two   three");
        assertInvalidArguments("one(two   three");
        assertInvalidArguments("one)two   three");
        assertArguments("one*two   three", "one*two", "three");
        assertArguments("one+two   three", "one+two", "three");
        assertArguments("one,two   three", "one,two", "three");
        assertArguments("one-two   three", "one-two", "three");
        assertArguments("one.two   three", "one.two", "three");
        assertArguments("one/two   three", "one/two", "three");
        assertArguments("one0two   three", "one0two", "three");
        assertArguments("one1two   three", "one1two", "three");
        assertArguments("one2two   three", "one2two", "three");
        assertArguments("one3two   three", "one3two", "three");
        assertArguments("one4two   three", "one4two", "three");
        assertArguments("one5two   three", "one5two", "three");
        assertArguments("one6two   three", "one6two", "three");
        assertArguments("one7two   three", "one7two", "three");
        assertArguments("one8two   three", "one8two", "three");
        assertArguments("one9two   three", "one9two", "three");
        assertArguments("one:two   three", "one:two", "three");
        assertArguments("one;two   three", "one");
        assertArguments("one<two   three", "one", "three");
        assertArguments("one=two   three", "one=two", "three");
        assertArguments("one>two   three", "one", "three");
        assertArguments("one?two   three", "one?two", "three");
        assertArguments("one@two   three", "one@two", "three");
        assertArguments("oneAtwo   three", "oneAtwo", "three");
        assertArguments("oneBtwo   three", "oneBtwo", "three");
        assertArguments("oneCtwo   three", "oneCtwo", "three");
        assertArguments("oneDtwo   three", "oneDtwo", "three");
        assertArguments("oneEtwo   three", "oneEtwo", "three");
        assertArguments("oneFtwo   three", "oneFtwo", "three");
        assertArguments("oneGtwo   three", "oneGtwo", "three");
        assertArguments("oneHtwo   three", "oneHtwo", "three");
        assertArguments("oneItwo   three", "oneItwo", "three");
        assertArguments("oneJtwo   three", "oneJtwo", "three");
        assertArguments("oneKtwo   three", "oneKtwo", "three");
        assertArguments("oneLtwo   three", "oneLtwo", "three");
        assertArguments("oneMtwo   three", "oneMtwo", "three");
        assertArguments("oneNtwo   three", "oneNtwo", "three");
        assertArguments("oneOtwo   three", "oneOtwo", "three");
        assertArguments("onePtwo   three", "onePtwo", "three");
        assertArguments("oneQtwo   three", "oneQtwo", "three");
        assertArguments("oneRtwo   three", "oneRtwo", "three");
        assertArguments("oneStwo   three", "oneStwo", "three");
        assertArguments("oneTtwo   three", "oneTtwo", "three");
        assertArguments("oneUtwo   three", "oneUtwo", "three");
        assertArguments("oneVtwo   three", "oneVtwo", "three");
        assertArguments("oneWtwo   three", "oneWtwo", "three");
        assertArguments("oneXtwo   three", "oneXtwo", "three");
        assertArguments("oneYtwo   three", "oneYtwo", "three");
        assertArguments("oneZtwo   three", "oneZtwo", "three");
        assertArguments("one[two   three", "one[two", "three");
        assertArguments("one\\two   three", "onetwo", "three");
        assertArguments("one]two   three", "one]two", "three");
        assertArguments("one^two   three", "one^two", "three");
        assertArguments("one_two   three", "one_two", "three");
        assertInvalidArguments("one`two   three");
        assertArguments("oneatwo   three", "oneatwo", "three");
        assertArguments("onebtwo   three", "onebtwo", "three");
        assertArguments("onectwo   three", "onectwo", "three");
        assertArguments("onedtwo   three", "onedtwo", "three");
        assertArguments("oneetwo   three", "oneetwo", "three");
        assertArguments("oneftwo   three", "oneftwo", "three");
        assertArguments("onegtwo   three", "onegtwo", "three");
        assertArguments("onehtwo   three", "onehtwo", "three");
        assertArguments("oneitwo   three", "oneitwo", "three");
        assertArguments("onejtwo   three", "onejtwo", "three");
        assertArguments("onektwo   three", "onektwo", "three");
        assertArguments("oneltwo   three", "oneltwo", "three");
        assertArguments("onemtwo   three", "onemtwo", "three");
        assertArguments("onentwo   three", "onentwo", "three");
        assertArguments("oneotwo   three", "oneotwo", "three");
        assertArguments("oneptwo   three", "oneptwo", "three");
        assertArguments("oneqtwo   three", "oneqtwo", "three");
        assertArguments("onertwo   three", "onertwo", "three");
        assertArguments("onestwo   three", "onestwo", "three");
        assertArguments("onettwo   three", "onettwo", "three");
        assertArguments("oneutwo   three", "oneutwo", "three");
        assertArguments("onevtwo   three", "onevtwo", "three");
        assertArguments("onewtwo   three", "onewtwo", "three");
        assertArguments("onextwo   three", "onextwo", "three");
        assertArguments("oneytwo   three", "oneytwo", "three");
        assertArguments("oneztwo   three", "oneztwo", "three");
        assertArguments("one{two   three", "one{two", "three");
        assertArguments("one|two   three", "one");
        assertArguments("one}two   three", "one}two", "three");
        assertArguments("one~two   three", "one~two", "three");
        assertArguments("one\u007ftwo   three", "one\u007ftwo", "three");
        assertArguments("one\u0080two   three", "one\u0080two", "three");
        assertArguments("one\u0081two   three", "one\u0081two", "three");
        assertArguments("one\u0082two   three", "one\u0082two", "three");
        assertArguments("one\u0083two   three", "one\u0083two", "three");
        assertArguments("one\u0084two   three", "one\u0084two", "three");
        assertArguments("one\u0085two   three", "one\u0085two", "three");
        assertArguments("one\u0086two   three", "one\u0086two", "three");
        assertArguments("one\u0087two   three", "one\u0087two", "three");
        assertArguments("one\u0088two   three", "one\u0088two", "three");
        assertArguments("one\u0089two   three", "one\u0089two", "three");
        assertArguments("one\u008atwo   three", "one\u008atwo", "three");
        assertArguments("one\u008btwo   three", "one\u008btwo", "three");
        assertArguments("one\u008ctwo   three", "one\u008ctwo", "three");
        assertArguments("one\u008dtwo   three", "one\u008dtwo", "three");
        assertArguments("one\u008etwo   three", "one\u008etwo", "three");
        assertArguments("one\u008ftwo   three", "one\u008ftwo", "three");
        assertArguments("one\u0090two   three", "one\u0090two", "three");
        assertArguments("one\u0091two   three", "one\u0091two", "three");
        assertArguments("one\u0092two   three", "one\u0092two", "three");
        assertArguments("one\u0093two   three", "one\u0093two", "three");
        assertArguments("one\u0094two   three", "one\u0094two", "three");
        assertArguments("one\u0095two   three", "one\u0095two", "three");
        assertArguments("one\u0096two   three", "one\u0096two", "three");
        assertArguments("one\u0097two   three", "one\u0097two", "three");
        assertArguments("one\u0098two   three", "one\u0098two", "three");
        assertArguments("one\u0099two   three", "one\u0099two", "three");
        assertArguments("one\u009atwo   three", "one\u009atwo", "three");
        assertArguments("one\u009btwo   three", "one\u009btwo", "three");
        assertArguments("one\u009ctwo   three", "one\u009ctwo", "three");
        assertArguments("one\u009dtwo   three", "one\u009dtwo", "three");
        assertArguments("one\u009etwo   three", "one\u009etwo", "three");
        assertArguments("one\u009ftwo   three", "one\u009ftwo", "three");
        assertArguments("one\u00a0two   three", "one\u00a0two", "three");
        assertArguments("one\u00a1two   three", "one\u00a1two", "three");
        assertArguments("one\u00a2two   three", "one\u00a2two", "three");
        assertArguments("one\u00a3two   three", "one\u00a3two", "three");
        assertArguments("one\u00a4two   three", "one\u00a4two", "three");
        assertArguments("one\u00a5two   three", "one\u00a5two", "three");
        assertArguments("one\u00a6two   three", "one\u00a6two", "three");
        assertArguments("one\u00a7two   three", "one\u00a7two", "three");
        assertArguments("one\u00a8two   three", "one\u00a8two", "three");
        assertArguments("one\u00a9two   three", "one\u00a9two", "three");
        assertArguments("one\u00aatwo   three", "one\u00aatwo", "three");
        assertArguments("one\u00abtwo   three", "one\u00abtwo", "three");
        assertArguments("one\u00actwo   three", "one\u00actwo", "three");
        assertArguments("one\u00adtwo   three", "one\u00adtwo", "three");
        assertArguments("one\u00aetwo   three", "one\u00aetwo", "three");
        assertArguments("one\u00aftwo   three", "one\u00aftwo", "three");
        assertArguments("one\u00b0two   three", "one\u00b0two", "three");
        assertArguments("one\u00b1two   three", "one\u00b1two", "three");
        assertArguments("one\u00b2two   three", "one\u00b2two", "three");
        assertArguments("one\u00b3two   three", "one\u00b3two", "three");
        assertArguments("one\u00b4two   three", "one\u00b4two", "three");
        assertArguments("one\u00b5two   three", "one\u00b5two", "three");
        assertArguments("one\u00b6two   three", "one\u00b6two", "three");
        assertArguments("one\u00b7two   three", "one\u00b7two", "three");
        assertArguments("one\u00b8two   three", "one\u00b8two", "three");
        assertArguments("one\u00b9two   three", "one\u00b9two", "three");
        assertArguments("one\u00batwo   three", "one\u00batwo", "three");
        assertArguments("one\u00bbtwo   three", "one\u00bbtwo", "three");
        assertArguments("one\u00bctwo   three", "one\u00bctwo", "three");
        assertArguments("one\u00bdtwo   three", "one\u00bdtwo", "three");
        assertArguments("one\u00betwo   three", "one\u00betwo", "three");
        assertArguments("one\u00bftwo   three", "one\u00bftwo", "three");
        assertArguments("one\u00c0two   three", "one\u00c0two", "three");
        assertArguments("one\u00c1two   three", "one\u00c1two", "three");
        assertArguments("one\u00c2two   three", "one\u00c2two", "three");
        assertArguments("one\u00c3two   three", "one\u00c3two", "three");
        assertArguments("one\u00c4two   three", "one\u00c4two", "three");
        assertArguments("one\u00c5two   three", "one\u00c5two", "three");
        assertArguments("one\u00c6two   three", "one\u00c6two", "three");
        assertArguments("one\u00c7two   three", "one\u00c7two", "three");
        assertArguments("one\u00c8two   three", "one\u00c8two", "three");
        assertArguments("one\u00c9two   three", "one\u00c9two", "three");
        assertArguments("one\u00catwo   three", "one\u00catwo", "three");
        assertArguments("one\u00cbtwo   three", "one\u00cbtwo", "three");
        assertArguments("one\u00cctwo   three", "one\u00cctwo", "three");
        assertArguments("one\u00cdtwo   three", "one\u00cdtwo", "three");
        assertArguments("one\u00cetwo   three", "one\u00cetwo", "three");
        assertArguments("one\u00cftwo   three", "one\u00cftwo", "three");
        assertArguments("one\u00d0two   three", "one\u00d0two", "three");
        assertArguments("one\u00d1two   three", "one\u00d1two", "three");
        assertArguments("one\u00d2two   three", "one\u00d2two", "three");
        assertArguments("one\u00d3two   three", "one\u00d3two", "three");
        assertArguments("one\u00d4two   three", "one\u00d4two", "three");
        assertArguments("one\u00d5two   three", "one\u00d5two", "three");
        assertArguments("one\u00d6two   three", "one\u00d6two", "three");
        assertArguments("one\u00d7two   three", "one\u00d7two", "three");
        assertArguments("one\u00d8two   three", "one\u00d8two", "three");
        assertArguments("one\u00d9two   three", "one\u00d9two", "three");
        assertArguments("one\u00datwo   three", "one\u00datwo", "three");
        assertArguments("one\u00dbtwo   three", "one\u00dbtwo", "three");
        assertArguments("one\u00dctwo   three", "one\u00dctwo", "three");
        assertArguments("one\u00ddtwo   three", "one\u00ddtwo", "three");
        assertArguments("one\u00detwo   three", "one\u00detwo", "three");
        assertArguments("one\u00dftwo   three", "one\u00dftwo", "three");
        assertArguments("one\u00e0two   three", "one\u00e0two", "three");
        assertArguments("one\u00e1two   three", "one\u00e1two", "three");
        assertArguments("one\u00e2two   three", "one\u00e2two", "three");
        assertArguments("one\u00e3two   three", "one\u00e3two", "three");
        assertArguments("one\u00e4two   three", "one\u00e4two", "three");
        assertArguments("one\u00e5two   three", "one\u00e5two", "three");
        assertArguments("one\u00e6two   three", "one\u00e6two", "three");
        assertArguments("one\u00e7two   three", "one\u00e7two", "three");
        assertArguments("one\u00e8two   three", "one\u00e8two", "three");
        assertArguments("one\u00e9two   three", "one\u00e9two", "three");
        assertArguments("one\u00eatwo   three", "one\u00eatwo", "three");
        assertArguments("one\u00ebtwo   three", "one\u00ebtwo", "three");
        assertArguments("one\u00ectwo   three", "one\u00ectwo", "three");
        assertArguments("one\u00edtwo   three", "one\u00edtwo", "three");
        assertArguments("one\u00eetwo   three", "one\u00eetwo", "three");
        assertArguments("one\u00eftwo   three", "one\u00eftwo", "three");
        assertArguments("one\u00f0two   three", "one\u00f0two", "three");
        assertArguments("one\u00f1two   three", "one\u00f1two", "three");
        assertArguments("one\u00f2two   three", "one\u00f2two", "three");
        assertArguments("one\u00f3two   three", "one\u00f3two", "three");
        assertArguments("one\u00f4two   three", "one\u00f4two", "three");
        assertArguments("one\u00f5two   three", "one\u00f5two", "three");
        assertArguments("one\u00f6two   three", "one\u00f6two", "three");
        assertArguments("one\u00f7two   three", "one\u00f7two", "three");
        assertArguments("one\u00f8two   three", "one\u00f8two", "three");
        assertArguments("one\u00f9two   three", "one\u00f9two", "three");
        assertArguments("one\u00fatwo   three", "one\u00fatwo", "three");
        assertArguments("one\u00fbtwo   three", "one\u00fbtwo", "three");
        assertArguments("one\u00fctwo   three", "one\u00fctwo", "three");
        assertArguments("one\u00fdtwo   three", "one\u00fdtwo", "three");
        assertArguments("one\u00fetwo   three", "one\u00fetwo", "three");
        assertArguments("one\u00fftwo   three", "one\u00fftwo", "three");
        assertArguments("one\\\u0000two   three", "onetwo", "three");
        assertArguments("one\\\u0001two   three", "one\u0001two", "three");
        assertArguments("one\\\u0002two   three", "one\u0002two", "three");
        assertArguments("one\\\u0003two   three", "one\u0003two", "three");
        assertArguments("one\\\u0004two   three", "one\u0004two", "three");
        assertArguments("one\\\u0005two   three", "one\u0005two", "three");
        assertArguments("one\\\u0006two   three", "one\u0006two", "three");
        assertArguments("one\\\u0007two   three", "one\u0007two", "three");
        assertArguments("one\\\btwo   three", "one\btwo", "three");
        assertArguments("one\\\ttwo   three", "one\ttwo", "three");
        assertArguments("one\\\ntwo   three", "onetwo", "three");
        assertArguments("one\\\u000btwo   three", "one\u000btwo", "three");
        assertArguments("one\\\ftwo   three", "one\ftwo", "three");
        assertArguments("one\\\rtwo   three", "one\rtwo", "three");
        assertArguments("one\\\u000etwo   three", "one\u000etwo", "three");
        assertArguments("one\\\u000ftwo   three", "one\u000ftwo", "three");
        assertArguments("one\\\u0010two   three", "one\u0010two", "three");
        assertArguments("one\\\u0011two   three", "one\u0011two", "three");
        assertArguments("one\\\u0012two   three", "one\u0012two", "three");
        assertArguments("one\\\u0013two   three", "one\u0013two", "three");
        assertArguments("one\\\u0014two   three", "one\u0014two", "three");
        assertArguments("one\\\u0015two   three", "one\u0015two", "three");
        assertArguments("one\\\u0016two   three", "one\u0016two", "three");
        assertArguments("one\\\u0017two   three", "one\u0017two", "three");
        assertArguments("one\\\u0018two   three", "one\u0018two", "three");
        assertArguments("one\\\u0019two   three", "one\u0019two", "three");
        assertArguments("one\\\u001atwo   three", "one\u001atwo", "three");
        assertArguments("one\\\u001btwo   three", "one\u001btwo", "three");
        assertArguments("one\\\u001ctwo   three", "one\u001ctwo", "three");
        assertArguments("one\\\u001dtwo   three", "one\u001dtwo", "three");
        assertArguments("one\\\u001etwo   three", "one\u001etwo", "three");
        assertArguments("one\\\u001ftwo   three", "one\u001ftwo", "three");
        assertArguments("one\\ two   three", "one two", "three");
        assertArguments("one\\!two   three", "one!two", "three");
        assertArguments("one\\\"two   three", "one\"two", "three");
        assertArguments("one\\#two   three", "one#two", "three");
        assertArguments("one\\$two   three", "one$two", "three");
        assertArguments("one\\%two   three", "one%two", "three");
        assertArguments("one\\&two   three", "one&two", "three");
        assertArguments("one\\'two   three", "one'two", "three");
        assertArguments("one\\(two   three", "one(two", "three");
        assertArguments("one\\)two   three", "one)two", "three");
        assertArguments("one\\*two   three", "one*two", "three");
        assertArguments("one\\+two   three", "one+two", "three");
        assertArguments("one\\,two   three", "one,two", "three");
        assertArguments("one\\-two   three", "one-two", "three");
        assertArguments("one\\.two   three", "one.two", "three");
        assertArguments("one\\/two   three", "one/two", "three");
        assertArguments("one\\0two   three", "one0two", "three");
        assertArguments("one\\1two   three", "one1two", "three");
        assertArguments("one\\2two   three", "one2two", "three");
        assertArguments("one\\3two   three", "one3two", "three");
        assertArguments("one\\4two   three", "one4two", "three");
        assertArguments("one\\5two   three", "one5two", "three");
        assertArguments("one\\6two   three", "one6two", "three");
        assertArguments("one\\7two   three", "one7two", "three");
        assertArguments("one\\8two   three", "one8two", "three");
        assertArguments("one\\9two   three", "one9two", "three");
        assertArguments("one\\:two   three", "one:two", "three");
        assertArguments("one\\;two   three", "one;two", "three");
        assertArguments("one\\<two   three", "one<two", "three");
        assertArguments("one\\=two   three", "one=two", "three");
        assertArguments("one\\>two   three", "one>two", "three");
        assertArguments("one\\?two   three", "one?two", "three");
        assertArguments("one\\@two   three", "one@two", "three");
        assertArguments("one\\Atwo   three", "oneAtwo", "three");
        assertArguments("one\\Btwo   three", "oneBtwo", "three");
        assertArguments("one\\Ctwo   three", "oneCtwo", "three");
        assertArguments("one\\Dtwo   three", "oneDtwo", "three");
        assertArguments("one\\Etwo   three", "oneEtwo", "three");
        assertArguments("one\\Ftwo   three", "oneFtwo", "three");
        assertArguments("one\\Gtwo   three", "oneGtwo", "three");
        assertArguments("one\\Htwo   three", "oneHtwo", "three");
        assertArguments("one\\Itwo   three", "oneItwo", "three");
        assertArguments("one\\Jtwo   three", "oneJtwo", "three");
        assertArguments("one\\Ktwo   three", "oneKtwo", "three");
        assertArguments("one\\Ltwo   three", "oneLtwo", "three");
        assertArguments("one\\Mtwo   three", "oneMtwo", "three");
        assertArguments("one\\Ntwo   three", "oneNtwo", "three");
        assertArguments("one\\Otwo   three", "oneOtwo", "three");
        assertArguments("one\\Ptwo   three", "onePtwo", "three");
        assertArguments("one\\Qtwo   three", "oneQtwo", "three");
        assertArguments("one\\Rtwo   three", "oneRtwo", "three");
        assertArguments("one\\Stwo   three", "oneStwo", "three");
        assertArguments("one\\Ttwo   three", "oneTtwo", "three");
        assertArguments("one\\Utwo   three", "oneUtwo", "three");
        assertArguments("one\\Vtwo   three", "oneVtwo", "three");
        assertArguments("one\\Wtwo   three", "oneWtwo", "three");
        assertArguments("one\\Xtwo   three", "oneXtwo", "three");
        assertArguments("one\\Ytwo   three", "oneYtwo", "three");
        assertArguments("one\\Ztwo   three", "oneZtwo", "three");
        assertArguments("one\\[two   three", "one[two", "three");
        assertArguments("one\\\\two   three", "one\\two", "three");
        assertArguments("one\\]two   three", "one]two", "three");
        assertArguments("one\\^two   three", "one^two", "three");
        assertArguments("one\\_two   three", "one_two", "three");
        assertArguments("one\\`two   three", "one`two", "three");
        assertArguments("one\\atwo   three", "oneatwo", "three");
        assertArguments("one\\btwo   three", "onebtwo", "three");
        assertArguments("one\\ctwo   three", "onectwo", "three");
        assertArguments("one\\dtwo   three", "onedtwo", "three");
        assertArguments("one\\etwo   three", "oneetwo", "three");
        assertArguments("one\\ftwo   three", "oneftwo", "three");
        assertArguments("one\\gtwo   three", "onegtwo", "three");
        assertArguments("one\\htwo   three", "onehtwo", "three");
        assertArguments("one\\itwo   three", "oneitwo", "three");
        assertArguments("one\\jtwo   three", "onejtwo", "three");
        assertArguments("one\\ktwo   three", "onektwo", "three");
        assertArguments("one\\ltwo   three", "oneltwo", "three");
        assertArguments("one\\mtwo   three", "onemtwo", "three");
        assertArguments("one\\ntwo   three", "onentwo", "three");
        assertArguments("one\\otwo   three", "oneotwo", "three");
        assertArguments("one\\ptwo   three", "oneptwo", "three");
        assertArguments("one\\qtwo   three", "oneqtwo", "three");
        assertArguments("one\\rtwo   three", "onertwo", "three");
        assertArguments("one\\stwo   three", "onestwo", "three");
        assertArguments("one\\ttwo   three", "onettwo", "three");
        assertArguments("one\\utwo   three", "oneutwo", "three");
        assertArguments("one\\vtwo   three", "onevtwo", "three");
        assertArguments("one\\wtwo   three", "onewtwo", "three");
        assertArguments("one\\xtwo   three", "onextwo", "three");
        assertArguments("one\\ytwo   three", "oneytwo", "three");
        assertArguments("one\\ztwo   three", "oneztwo", "three");
        assertArguments("one\\{two   three", "one{two", "three");
        assertArguments("one\\|two   three", "one|two", "three");
        assertArguments("one\\}two   three", "one}two", "three");
        assertArguments("one\\~two   three", "one~two", "three");
        assertArguments("one\\\u007ftwo   three", "one\u007ftwo", "three");
        assertArguments("one\\\u0080two   three", "one\u0080two", "three");
        assertArguments("one\\\u0081two   three", "one\u0081two", "three");
        assertArguments("one\\\u0082two   three", "one\u0082two", "three");
        assertArguments("one\\\u0083two   three", "one\u0083two", "three");
        assertArguments("one\\\u0084two   three", "one\u0084two", "three");
        assertArguments("one\\\u0085two   three", "one\u0085two", "three");
        assertArguments("one\\\u0086two   three", "one\u0086two", "three");
        assertArguments("one\\\u0087two   three", "one\u0087two", "three");
        assertArguments("one\\\u0088two   three", "one\u0088two", "three");
        assertArguments("one\\\u0089two   three", "one\u0089two", "three");
        assertArguments("one\\\u008atwo   three", "one\u008atwo", "three");
        assertArguments("one\\\u008btwo   three", "one\u008btwo", "three");
        assertArguments("one\\\u008ctwo   three", "one\u008ctwo", "three");
        assertArguments("one\\\u008dtwo   three", "one\u008dtwo", "three");
        assertArguments("one\\\u008etwo   three", "one\u008etwo", "three");
        assertArguments("one\\\u008ftwo   three", "one\u008ftwo", "three");
        assertArguments("one\\\u0090two   three", "one\u0090two", "three");
        assertArguments("one\\\u0091two   three", "one\u0091two", "three");
        assertArguments("one\\\u0092two   three", "one\u0092two", "three");
        assertArguments("one\\\u0093two   three", "one\u0093two", "three");
        assertArguments("one\\\u0094two   three", "one\u0094two", "three");
        assertArguments("one\\\u0095two   three", "one\u0095two", "three");
        assertArguments("one\\\u0096two   three", "one\u0096two", "three");
        assertArguments("one\\\u0097two   three", "one\u0097two", "three");
        assertArguments("one\\\u0098two   three", "one\u0098two", "three");
        assertArguments("one\\\u0099two   three", "one\u0099two", "three");
        assertArguments("one\\\u009atwo   three", "one\u009atwo", "three");
        assertArguments("one\\\u009btwo   three", "one\u009btwo", "three");
        assertArguments("one\\\u009ctwo   three", "one\u009ctwo", "three");
        assertArguments("one\\\u009dtwo   three", "one\u009dtwo", "three");
        assertArguments("one\\\u009etwo   three", "one\u009etwo", "three");
        assertArguments("one\\\u009ftwo   three", "one\u009ftwo", "three");
        assertArguments("one\\\u00a0two   three", "one\u00a0two", "three");
        assertArguments("one\\\u00a1two   three", "one\u00a1two", "three");
        assertArguments("one\\\u00a2two   three", "one\u00a2two", "three");
        assertArguments("one\\\u00a3two   three", "one\u00a3two", "three");
        assertArguments("one\\\u00a4two   three", "one\u00a4two", "three");
        assertArguments("one\\\u00a5two   three", "one\u00a5two", "three");
        assertArguments("one\\\u00a6two   three", "one\u00a6two", "three");
        assertArguments("one\\\u00a7two   three", "one\u00a7two", "three");
        assertArguments("one\\\u00a8two   three", "one\u00a8two", "three");
        assertArguments("one\\\u00a9two   three", "one\u00a9two", "three");
        assertArguments("one\\\u00aatwo   three", "one\u00aatwo", "three");
        assertArguments("one\\\u00abtwo   three", "one\u00abtwo", "three");
        assertArguments("one\\\u00actwo   three", "one\u00actwo", "three");
        assertArguments("one\\\u00adtwo   three", "one\u00adtwo", "three");
        assertArguments("one\\\u00aetwo   three", "one\u00aetwo", "three");
        assertArguments("one\\\u00aftwo   three", "one\u00aftwo", "three");
        assertArguments("one\\\u00b0two   three", "one\u00b0two", "three");
        assertArguments("one\\\u00b1two   three", "one\u00b1two", "three");
        assertArguments("one\\\u00b2two   three", "one\u00b2two", "three");
        assertArguments("one\\\u00b3two   three", "one\u00b3two", "three");
        assertArguments("one\\\u00b4two   three", "one\u00b4two", "three");
        assertArguments("one\\\u00b5two   three", "one\u00b5two", "three");
        assertArguments("one\\\u00b6two   three", "one\u00b6two", "three");
        assertArguments("one\\\u00b7two   three", "one\u00b7two", "three");
        assertArguments("one\\\u00b8two   three", "one\u00b8two", "three");
        assertArguments("one\\\u00b9two   three", "one\u00b9two", "three");
        assertArguments("one\\\u00batwo   three", "one\u00batwo", "three");
        assertArguments("one\\\u00bbtwo   three", "one\u00bbtwo", "three");
        assertArguments("one\\\u00bctwo   three", "one\u00bctwo", "three");
        assertArguments("one\\\u00bdtwo   three", "one\u00bdtwo", "three");
        assertArguments("one\\\u00betwo   three", "one\u00betwo", "three");
        assertArguments("one\\\u00bftwo   three", "one\u00bftwo", "three");
        assertArguments("one\\\u00c0two   three", "one\u00c0two", "three");
        assertArguments("one\\\u00c1two   three", "one\u00c1two", "three");
        assertArguments("one\\\u00c2two   three", "one\u00c2two", "three");
        assertArguments("one\\\u00c3two   three", "one\u00c3two", "three");
        assertArguments("one\\\u00c4two   three", "one\u00c4two", "three");
        assertArguments("one\\\u00c5two   three", "one\u00c5two", "three");
        assertArguments("one\\\u00c6two   three", "one\u00c6two", "three");
        assertArguments("one\\\u00c7two   three", "one\u00c7two", "three");
        assertArguments("one\\\u00c8two   three", "one\u00c8two", "three");
        assertArguments("one\\\u00c9two   three", "one\u00c9two", "three");
        assertArguments("one\\\u00catwo   three", "one\u00catwo", "three");
        assertArguments("one\\\u00cbtwo   three", "one\u00cbtwo", "three");
        assertArguments("one\\\u00cctwo   three", "one\u00cctwo", "three");
        assertArguments("one\\\u00cdtwo   three", "one\u00cdtwo", "three");
        assertArguments("one\\\u00cetwo   three", "one\u00cetwo", "three");
        assertArguments("one\\\u00cftwo   three", "one\u00cftwo", "three");
        assertArguments("one\\\u00d0two   three", "one\u00d0two", "three");
        assertArguments("one\\\u00d1two   three", "one\u00d1two", "three");
        assertArguments("one\\\u00d2two   three", "one\u00d2two", "three");
        assertArguments("one\\\u00d3two   three", "one\u00d3two", "three");
        assertArguments("one\\\u00d4two   three", "one\u00d4two", "three");
        assertArguments("one\\\u00d5two   three", "one\u00d5two", "three");
        assertArguments("one\\\u00d6two   three", "one\u00d6two", "three");
        assertArguments("one\\\u00d7two   three", "one\u00d7two", "three");
        assertArguments("one\\\u00d8two   three", "one\u00d8two", "three");
        assertArguments("one\\\u00d9two   three", "one\u00d9two", "three");
        assertArguments("one\\\u00datwo   three", "one\u00datwo", "three");
        assertArguments("one\\\u00dbtwo   three", "one\u00dbtwo", "three");
        assertArguments("one\\\u00dctwo   three", "one\u00dctwo", "three");
        assertArguments("one\\\u00ddtwo   three", "one\u00ddtwo", "three");
        assertArguments("one\\\u00detwo   three", "one\u00detwo", "three");
        assertArguments("one\\\u00dftwo   three", "one\u00dftwo", "three");
        assertArguments("one\\\u00e0two   three", "one\u00e0two", "three");
        assertArguments("one\\\u00e1two   three", "one\u00e1two", "three");
        assertArguments("one\\\u00e2two   three", "one\u00e2two", "three");
        assertArguments("one\\\u00e3two   three", "one\u00e3two", "three");
        assertArguments("one\\\u00e4two   three", "one\u00e4two", "three");
        assertArguments("one\\\u00e5two   three", "one\u00e5two", "three");
        assertArguments("one\\\u00e6two   three", "one\u00e6two", "three");
        assertArguments("one\\\u00e7two   three", "one\u00e7two", "three");
        assertArguments("one\\\u00e8two   three", "one\u00e8two", "three");
        assertArguments("one\\\u00e9two   three", "one\u00e9two", "three");
        assertArguments("one\\\u00eatwo   three", "one\u00eatwo", "three");
        assertArguments("one\\\u00ebtwo   three", "one\u00ebtwo", "three");
        assertArguments("one\\\u00ectwo   three", "one\u00ectwo", "three");
        assertArguments("one\\\u00edtwo   three", "one\u00edtwo", "three");
        assertArguments("one\\\u00eetwo   three", "one\u00eetwo", "three");
        assertArguments("one\\\u00eftwo   three", "one\u00eftwo", "three");
        assertArguments("one\\\u00f0two   three", "one\u00f0two", "three");
        assertArguments("one\\\u00f1two   three", "one\u00f1two", "three");
        assertArguments("one\\\u00f2two   three", "one\u00f2two", "three");
        assertArguments("one\\\u00f3two   three", "one\u00f3two", "three");
        assertArguments("one\\\u00f4two   three", "one\u00f4two", "three");
        assertArguments("one\\\u00f5two   three", "one\u00f5two", "three");
        assertArguments("one\\\u00f6two   three", "one\u00f6two", "three");
        assertArguments("one\\\u00f7two   three", "one\u00f7two", "three");
        assertArguments("one\\\u00f8two   three", "one\u00f8two", "three");
        assertArguments("one\\\u00f9two   three", "one\u00f9two", "three");
        assertArguments("one\\\u00fatwo   three", "one\u00fatwo", "three");
        assertArguments("one\\\u00fbtwo   three", "one\u00fbtwo", "three");
        assertArguments("one\\\u00fctwo   three", "one\u00fctwo", "three");
        assertArguments("one\\\u00fdtwo   three", "one\u00fdtwo", "three");
        assertArguments("one\\\u00fetwo   three", "one\u00fetwo", "three");
        assertArguments("one\\\u00fftwo   three", "one\u00fftwo", "three");
        assertArguments("'one\u0000two'   three", "onetwo", "three");
        assertArguments("'one\u0001two'   three", "one\u0001two", "three");
        assertArguments("'one\u0002two'   three", "one\u0002two", "three");
        assertArguments("'one\u0003two'   three", "one\u0003two", "three");
        assertArguments("'one\u0004two'   three", "one\u0004two", "three");
        assertArguments("'one\u0005two'   three", "one\u0005two", "three");
        assertArguments("'one\u0006two'   three", "one\u0006two", "three");
        assertArguments("'one\u0007two'   three", "one\u0007two", "three");
        assertArguments("'one\btwo'   three", "one\btwo", "three");
        assertArguments("'one\ttwo'   three", "one\ttwo", "three");
        assertArguments("'one\ntwo'   three", "one\ntwo", "three");
        assertArguments("'one\u000btwo'   three", "one\u000btwo", "three");
        assertArguments("'one\ftwo'   three", "one\ftwo", "three");
        assertArguments("'one\rtwo'   three", "one\rtwo", "three");
        assertArguments("'one\u000etwo'   three", "one\u000etwo", "three");
        assertArguments("'one\u000ftwo'   three", "one\u000ftwo", "three");
        assertArguments("'one\u0010two'   three", "one\u0010two", "three");
        assertArguments("'one\u0011two'   three", "one\u0011two", "three");
        assertArguments("'one\u0012two'   three", "one\u0012two", "three");
        assertArguments("'one\u0013two'   three", "one\u0013two", "three");
        assertArguments("'one\u0014two'   three", "one\u0014two", "three");
        assertArguments("'one\u0015two'   three", "one\u0015two", "three");
        assertArguments("'one\u0016two'   three", "one\u0016two", "three");
        assertArguments("'one\u0017two'   three", "one\u0017two", "three");
        assertArguments("'one\u0018two'   three", "one\u0018two", "three");
        assertArguments("'one\u0019two'   three", "one\u0019two", "three");
        assertArguments("'one\u001atwo'   three", "one\u001atwo", "three");
        assertArguments("'one\u001btwo'   three", "one\u001btwo", "three");
        assertArguments("'one\u001ctwo'   three", "one\u001ctwo", "three");
        assertArguments("'one\u001dtwo'   three", "one\u001dtwo", "three");
        assertArguments("'one\u001etwo'   three", "one\u001etwo", "three");
        assertArguments("'one\u001ftwo'   three", "one\u001ftwo", "three");
        assertArguments("'one two'   three", "one two", "three");
        assertArguments("'one!two'   three", "one!two", "three");
        assertArguments("'one\"two'   three", "one\"two", "three");
        assertArguments("'one#two'   three", "one#two", "three");
        assertArguments("'one$two'   three", "one$two", "three");
        assertArguments("'one%two'   three", "one%two", "three");
        assertArguments("'one&two'   three", "one&two", "three");
        assertInvalidArguments("'one'two'   three");
        assertArguments("'one(two'   three", "one(two", "three");
        assertArguments("'one)two'   three", "one)two", "three");
        assertArguments("'one*two'   three", "one*two", "three");
        assertArguments("'one+two'   three", "one+two", "three");
        assertArguments("'one,two'   three", "one,two", "three");
        assertArguments("'one-two'   three", "one-two", "three");
        assertArguments("'one.two'   three", "one.two", "three");
        assertArguments("'one/two'   three", "one/two", "three");
        assertArguments("'one0two'   three", "one0two", "three");
        assertArguments("'one1two'   three", "one1two", "three");
        assertArguments("'one2two'   three", "one2two", "three");
        assertArguments("'one3two'   three", "one3two", "three");
        assertArguments("'one4two'   three", "one4two", "three");
        assertArguments("'one5two'   three", "one5two", "three");
        assertArguments("'one6two'   three", "one6two", "three");
        assertArguments("'one7two'   three", "one7two", "three");
        assertArguments("'one8two'   three", "one8two", "three");
        assertArguments("'one9two'   three", "one9two", "three");
        assertArguments("'one:two'   three", "one:two", "three");
        assertArguments("'one;two'   three", "one;two", "three");
        assertArguments("'one<two'   three", "one<two", "three");
        assertArguments("'one=two'   three", "one=two", "three");
        assertArguments("'one>two'   three", "one>two", "three");
        assertArguments("'one?two'   three", "one?two", "three");
        assertArguments("'one@two'   three", "one@two", "three");
        assertArguments("'oneAtwo'   three", "oneAtwo", "three");
        assertArguments("'oneBtwo'   three", "oneBtwo", "three");
        assertArguments("'oneCtwo'   three", "oneCtwo", "three");
        assertArguments("'oneDtwo'   three", "oneDtwo", "three");
        assertArguments("'oneEtwo'   three", "oneEtwo", "three");
        assertArguments("'oneFtwo'   three", "oneFtwo", "three");
        assertArguments("'oneGtwo'   three", "oneGtwo", "three");
        assertArguments("'oneHtwo'   three", "oneHtwo", "three");
        assertArguments("'oneItwo'   three", "oneItwo", "three");
        assertArguments("'oneJtwo'   three", "oneJtwo", "three");
        assertArguments("'oneKtwo'   three", "oneKtwo", "three");
        assertArguments("'oneLtwo'   three", "oneLtwo", "three");
        assertArguments("'oneMtwo'   three", "oneMtwo", "three");
        assertArguments("'oneNtwo'   three", "oneNtwo", "three");
        assertArguments("'oneOtwo'   three", "oneOtwo", "three");
        assertArguments("'onePtwo'   three", "onePtwo", "three");
        assertArguments("'oneQtwo'   three", "oneQtwo", "three");
        assertArguments("'oneRtwo'   three", "oneRtwo", "three");
        assertArguments("'oneStwo'   three", "oneStwo", "three");
        assertArguments("'oneTtwo'   three", "oneTtwo", "three");
        assertArguments("'oneUtwo'   three", "oneUtwo", "three");
        assertArguments("'oneVtwo'   three", "oneVtwo", "three");
        assertArguments("'oneWtwo'   three", "oneWtwo", "three");
        assertArguments("'oneXtwo'   three", "oneXtwo", "three");
        assertArguments("'oneYtwo'   three", "oneYtwo", "three");
        assertArguments("'oneZtwo'   three", "oneZtwo", "three");
        assertArguments("'one[two'   three", "one[two", "three");
        assertArguments("'one\\two'   three", "one\\two", "three");
        assertArguments("'one]two'   three", "one]two", "three");
        assertArguments("'one^two'   three", "one^two", "three");
        assertArguments("'one_two'   three", "one_two", "three");
        assertArguments("'one`two'   three", "one`two", "three");
        assertArguments("'oneatwo'   three", "oneatwo", "three");
        assertArguments("'onebtwo'   three", "onebtwo", "three");
        assertArguments("'onectwo'   three", "onectwo", "three");
        assertArguments("'onedtwo'   three", "onedtwo", "three");
        assertArguments("'oneetwo'   three", "oneetwo", "three");
        assertArguments("'oneftwo'   three", "oneftwo", "three");
        assertArguments("'onegtwo'   three", "onegtwo", "three");
        assertArguments("'onehtwo'   three", "onehtwo", "three");
        assertArguments("'oneitwo'   three", "oneitwo", "three");
        assertArguments("'onejtwo'   three", "onejtwo", "three");
        assertArguments("'onektwo'   three", "onektwo", "three");
        assertArguments("'oneltwo'   three", "oneltwo", "three");
        assertArguments("'onemtwo'   three", "onemtwo", "three");
        assertArguments("'onentwo'   three", "onentwo", "three");
        assertArguments("'oneotwo'   three", "oneotwo", "three");
        assertArguments("'oneptwo'   three", "oneptwo", "three");
        assertArguments("'oneqtwo'   three", "oneqtwo", "three");
        assertArguments("'onertwo'   three", "onertwo", "three");
        assertArguments("'onestwo'   three", "onestwo", "three");
        assertArguments("'onettwo'   three", "onettwo", "three");
        assertArguments("'oneutwo'   three", "oneutwo", "three");
        assertArguments("'onevtwo'   three", "onevtwo", "three");
        assertArguments("'onewtwo'   three", "onewtwo", "three");
        assertArguments("'onextwo'   three", "onextwo", "three");
        assertArguments("'oneytwo'   three", "oneytwo", "three");
        assertArguments("'oneztwo'   three", "oneztwo", "three");
        assertArguments("'one{two'   three", "one{two", "three");
        assertArguments("'one|two'   three", "one|two", "three");
        assertArguments("'one}two'   three", "one}two", "three");
        assertArguments("'one~two'   three", "one~two", "three");
        assertArguments("'one\u007ftwo'   three", "one\u007ftwo", "three");
        assertArguments("'one\u0080two'   three", "one\u0080two", "three");
        assertArguments("'one\u0081two'   three", "one\u0081two", "three");
        assertArguments("'one\u0082two'   three", "one\u0082two", "three");
        assertArguments("'one\u0083two'   three", "one\u0083two", "three");
        assertArguments("'one\u0084two'   three", "one\u0084two", "three");
        assertArguments("'one\u0085two'   three", "one\u0085two", "three");
        assertArguments("'one\u0086two'   three", "one\u0086two", "three");
        assertArguments("'one\u0087two'   three", "one\u0087two", "three");
        assertArguments("'one\u0088two'   three", "one\u0088two", "three");
        assertArguments("'one\u0089two'   three", "one\u0089two", "three");
        assertArguments("'one\u008atwo'   three", "one\u008atwo", "three");
        assertArguments("'one\u008btwo'   three", "one\u008btwo", "three");
        assertArguments("'one\u008ctwo'   three", "one\u008ctwo", "three");
        assertArguments("'one\u008dtwo'   three", "one\u008dtwo", "three");
        assertArguments("'one\u008etwo'   three", "one\u008etwo", "three");
        assertArguments("'one\u008ftwo'   three", "one\u008ftwo", "three");
        assertArguments("'one\u0090two'   three", "one\u0090two", "three");
        assertArguments("'one\u0091two'   three", "one\u0091two", "three");
        assertArguments("'one\u0092two'   three", "one\u0092two", "three");
        assertArguments("'one\u0093two'   three", "one\u0093two", "three");
        assertArguments("'one\u0094two'   three", "one\u0094two", "three");
        assertArguments("'one\u0095two'   three", "one\u0095two", "three");
        assertArguments("'one\u0096two'   three", "one\u0096two", "three");
        assertArguments("'one\u0097two'   three", "one\u0097two", "three");
        assertArguments("'one\u0098two'   three", "one\u0098two", "three");
        assertArguments("'one\u0099two'   three", "one\u0099two", "three");
        assertArguments("'one\u009atwo'   three", "one\u009atwo", "three");
        assertArguments("'one\u009btwo'   three", "one\u009btwo", "three");
        assertArguments("'one\u009ctwo'   three", "one\u009ctwo", "three");
        assertArguments("'one\u009dtwo'   three", "one\u009dtwo", "three");
        assertArguments("'one\u009etwo'   three", "one\u009etwo", "three");
        assertArguments("'one\u009ftwo'   three", "one\u009ftwo", "three");
        assertArguments("'one\u00a0two'   three", "one\u00a0two", "three");
        assertArguments("'one\u00a1two'   three", "one\u00a1two", "three");
        assertArguments("'one\u00a2two'   three", "one\u00a2two", "three");
        assertArguments("'one\u00a3two'   three", "one\u00a3two", "three");
        assertArguments("'one\u00a4two'   three", "one\u00a4two", "three");
        assertArguments("'one\u00a5two'   three", "one\u00a5two", "three");
        assertArguments("'one\u00a6two'   three", "one\u00a6two", "three");
        assertArguments("'one\u00a7two'   three", "one\u00a7two", "three");
        assertArguments("'one\u00a8two'   three", "one\u00a8two", "three");
        assertArguments("'one\u00a9two'   three", "one\u00a9two", "three");
        assertArguments("'one\u00aatwo'   three", "one\u00aatwo", "three");
        assertArguments("'one\u00abtwo'   three", "one\u00abtwo", "three");
        assertArguments("'one\u00actwo'   three", "one\u00actwo", "three");
        assertArguments("'one\u00adtwo'   three", "one\u00adtwo", "three");
        assertArguments("'one\u00aetwo'   three", "one\u00aetwo", "three");
        assertArguments("'one\u00aftwo'   three", "one\u00aftwo", "three");
        assertArguments("'one\u00b0two'   three", "one\u00b0two", "three");
        assertArguments("'one\u00b1two'   three", "one\u00b1two", "three");
        assertArguments("'one\u00b2two'   three", "one\u00b2two", "three");
        assertArguments("'one\u00b3two'   three", "one\u00b3two", "three");
        assertArguments("'one\u00b4two'   three", "one\u00b4two", "three");
        assertArguments("'one\u00b5two'   three", "one\u00b5two", "three");
        assertArguments("'one\u00b6two'   three", "one\u00b6two", "three");
        assertArguments("'one\u00b7two'   three", "one\u00b7two", "three");
        assertArguments("'one\u00b8two'   three", "one\u00b8two", "three");
        assertArguments("'one\u00b9two'   three", "one\u00b9two", "three");
        assertArguments("'one\u00batwo'   three", "one\u00batwo", "three");
        assertArguments("'one\u00bbtwo'   three", "one\u00bbtwo", "three");
        assertArguments("'one\u00bctwo'   three", "one\u00bctwo", "three");
        assertArguments("'one\u00bdtwo'   three", "one\u00bdtwo", "three");
        assertArguments("'one\u00betwo'   three", "one\u00betwo", "three");
        assertArguments("'one\u00bftwo'   three", "one\u00bftwo", "three");
        assertArguments("'one\u00c0two'   three", "one\u00c0two", "three");
        assertArguments("'one\u00c1two'   three", "one\u00c1two", "three");
        assertArguments("'one\u00c2two'   three", "one\u00c2two", "three");
        assertArguments("'one\u00c3two'   three", "one\u00c3two", "three");
        assertArguments("'one\u00c4two'   three", "one\u00c4two", "three");
        assertArguments("'one\u00c5two'   three", "one\u00c5two", "three");
        assertArguments("'one\u00c6two'   three", "one\u00c6two", "three");
        assertArguments("'one\u00c7two'   three", "one\u00c7two", "three");
        assertArguments("'one\u00c8two'   three", "one\u00c8two", "three");
        assertArguments("'one\u00c9two'   three", "one\u00c9two", "three");
        assertArguments("'one\u00catwo'   three", "one\u00catwo", "three");
        assertArguments("'one\u00cbtwo'   three", "one\u00cbtwo", "three");
        assertArguments("'one\u00cctwo'   three", "one\u00cctwo", "three");
        assertArguments("'one\u00cdtwo'   three", "one\u00cdtwo", "three");
        assertArguments("'one\u00cetwo'   three", "one\u00cetwo", "three");
        assertArguments("'one\u00cftwo'   three", "one\u00cftwo", "three");
        assertArguments("'one\u00d0two'   three", "one\u00d0two", "three");
        assertArguments("'one\u00d1two'   three", "one\u00d1two", "three");
        assertArguments("'one\u00d2two'   three", "one\u00d2two", "three");
        assertArguments("'one\u00d3two'   three", "one\u00d3two", "three");
        assertArguments("'one\u00d4two'   three", "one\u00d4two", "three");
        assertArguments("'one\u00d5two'   three", "one\u00d5two", "three");
        assertArguments("'one\u00d6two'   three", "one\u00d6two", "three");
        assertArguments("'one\u00d7two'   three", "one\u00d7two", "three");
        assertArguments("'one\u00d8two'   three", "one\u00d8two", "three");
        assertArguments("'one\u00d9two'   three", "one\u00d9two", "three");
        assertArguments("'one\u00datwo'   three", "one\u00datwo", "three");
        assertArguments("'one\u00dbtwo'   three", "one\u00dbtwo", "three");
        assertArguments("'one\u00dctwo'   three", "one\u00dctwo", "three");
        assertArguments("'one\u00ddtwo'   three", "one\u00ddtwo", "three");
        assertArguments("'one\u00detwo'   three", "one\u00detwo", "three");
        assertArguments("'one\u00dftwo'   three", "one\u00dftwo", "three");
        assertArguments("'one\u00e0two'   three", "one\u00e0two", "three");
        assertArguments("'one\u00e1two'   three", "one\u00e1two", "three");
        assertArguments("'one\u00e2two'   three", "one\u00e2two", "three");
        assertArguments("'one\u00e3two'   three", "one\u00e3two", "three");
        assertArguments("'one\u00e4two'   three", "one\u00e4two", "three");
        assertArguments("'one\u00e5two'   three", "one\u00e5two", "three");
        assertArguments("'one\u00e6two'   three", "one\u00e6two", "three");
        assertArguments("'one\u00e7two'   three", "one\u00e7two", "three");
        assertArguments("'one\u00e8two'   three", "one\u00e8two", "three");
        assertArguments("'one\u00e9two'   three", "one\u00e9two", "three");
        assertArguments("'one\u00eatwo'   three", "one\u00eatwo", "three");
        assertArguments("'one\u00ebtwo'   three", "one\u00ebtwo", "three");
        assertArguments("'one\u00ectwo'   three", "one\u00ectwo", "three");
        assertArguments("'one\u00edtwo'   three", "one\u00edtwo", "three");
        assertArguments("'one\u00eetwo'   three", "one\u00eetwo", "three");
        assertArguments("'one\u00eftwo'   three", "one\u00eftwo", "three");
        assertArguments("'one\u00f0two'   three", "one\u00f0two", "three");
        assertArguments("'one\u00f1two'   three", "one\u00f1two", "three");
        assertArguments("'one\u00f2two'   three", "one\u00f2two", "three");
        assertArguments("'one\u00f3two'   three", "one\u00f3two", "three");
        assertArguments("'one\u00f4two'   three", "one\u00f4two", "three");
        assertArguments("'one\u00f5two'   three", "one\u00f5two", "three");
        assertArguments("'one\u00f6two'   three", "one\u00f6two", "three");
        assertArguments("'one\u00f7two'   three", "one\u00f7two", "three");
        assertArguments("'one\u00f8two'   three", "one\u00f8two", "three");
        assertArguments("'one\u00f9two'   three", "one\u00f9two", "three");
        assertArguments("'one\u00fatwo'   three", "one\u00fatwo", "three");
        assertArguments("'one\u00fbtwo'   three", "one\u00fbtwo", "three");
        assertArguments("'one\u00fctwo'   three", "one\u00fctwo", "three");
        assertArguments("'one\u00fdtwo'   three", "one\u00fdtwo", "three");
        assertArguments("'one\u00fetwo'   three", "one\u00fetwo", "three");
        assertArguments("'one\u00fftwo'   three", "one\u00fftwo", "three");
        assertArguments("'one\\\u0000two'   three", "one\\two", "three");
        assertArguments("'one\\\u0001two'   three", "one\\\u0001two", "three");
        assertArguments("'one\\\u0002two'   three", "one\\\u0002two", "three");
        assertArguments("'one\\\u0003two'   three", "one\\\u0003two", "three");
        assertArguments("'one\\\u0004two'   three", "one\\\u0004two", "three");
        assertArguments("'one\\\u0005two'   three", "one\\\u0005two", "three");
        assertArguments("'one\\\u0006two'   three", "one\\\u0006two", "three");
        assertArguments("'one\\\u0007two'   three", "one\\\u0007two", "three");
        assertArguments("'one\\\btwo'   three", "one\\\btwo", "three");
        assertArguments("'one\\\ttwo'   three", "one\\\ttwo", "three");
        assertArguments("'one\\\ntwo'   three", "one\\\ntwo", "three");
        assertArguments("'one\\\u000btwo'   three", "one\\\u000btwo", "three");
        assertArguments("'one\\\ftwo'   three", "one\\\ftwo", "three");
        assertArguments("'one\\\rtwo'   three", "one\\\rtwo", "three");
        assertArguments("'one\\\u000etwo'   three", "one\\\u000etwo", "three");
        assertArguments("'one\\\u000ftwo'   three", "one\\\u000ftwo", "three");
        assertArguments("'one\\\u0010two'   three", "one\\\u0010two", "three");
        assertArguments("'one\\\u0011two'   three", "one\\\u0011two", "three");
        assertArguments("'one\\\u0012two'   three", "one\\\u0012two", "three");
        assertArguments("'one\\\u0013two'   three", "one\\\u0013two", "three");
        assertArguments("'one\\\u0014two'   three", "one\\\u0014two", "three");
        assertArguments("'one\\\u0015two'   three", "one\\\u0015two", "three");
        assertArguments("'one\\\u0016two'   three", "one\\\u0016two", "three");
        assertArguments("'one\\\u0017two'   three", "one\\\u0017two", "three");
        assertArguments("'one\\\u0018two'   three", "one\\\u0018two", "three");
        assertArguments("'one\\\u0019two'   three", "one\\\u0019two", "three");
        assertArguments("'one\\\u001atwo'   three", "one\\\u001atwo", "three");
        assertArguments("'one\\\u001btwo'   three", "one\\\u001btwo", "three");
        assertArguments("'one\\\u001ctwo'   three", "one\\\u001ctwo", "three");
        assertArguments("'one\\\u001dtwo'   three", "one\\\u001dtwo", "three");
        assertArguments("'one\\\u001etwo'   three", "one\\\u001etwo", "three");
        assertArguments("'one\\\u001ftwo'   three", "one\\\u001ftwo", "three");
        assertArguments("'one\\ two'   three", "one\\ two", "three");
        assertArguments("'one\\!two'   three", "one\\!two", "three");
        assertArguments("'one\\\"two'   three", "one\\\"two", "three");
        assertArguments("'one\\#two'   three", "one\\#two", "three");
        assertArguments("'one\\$two'   three", "one\\$two", "three");
        assertArguments("'one\\%two'   three", "one\\%two", "three");
        assertArguments("'one\\&two'   three", "one\\&two", "three");
        assertInvalidArguments("'one\\'two'   three");
        assertArguments("'one\\(two'   three", "one\\(two", "three");
        assertArguments("'one\\)two'   three", "one\\)two", "three");
        assertArguments("'one\\*two'   three", "one\\*two", "three");
        assertArguments("'one\\+two'   three", "one\\+two", "three");
        assertArguments("'one\\,two'   three", "one\\,two", "three");
        assertArguments("'one\\-two'   three", "one\\-two", "three");
        assertArguments("'one\\.two'   three", "one\\.two", "three");
        assertArguments("'one\\/two'   three", "one\\/two", "three");
        assertArguments("'one\\0two'   three", "one\\0two", "three");
        assertArguments("'one\\1two'   three", "one\\1two", "three");
        assertArguments("'one\\2two'   three", "one\\2two", "three");
        assertArguments("'one\\3two'   three", "one\\3two", "three");
        assertArguments("'one\\4two'   three", "one\\4two", "three");
        assertArguments("'one\\5two'   three", "one\\5two", "three");
        assertArguments("'one\\6two'   three", "one\\6two", "three");
        assertArguments("'one\\7two'   three", "one\\7two", "three");
        assertArguments("'one\\8two'   three", "one\\8two", "three");
        assertArguments("'one\\9two'   three", "one\\9two", "three");
        assertArguments("'one\\:two'   three", "one\\:two", "three");
        assertArguments("'one\\;two'   three", "one\\;two", "three");
        assertArguments("'one\\<two'   three", "one\\<two", "three");
        assertArguments("'one\\=two'   three", "one\\=two", "three");
        assertArguments("'one\\>two'   three", "one\\>two", "three");
        assertArguments("'one\\?two'   three", "one\\?two", "three");
        assertArguments("'one\\@two'   three", "one\\@two", "three");
        assertArguments("'one\\Atwo'   three", "one\\Atwo", "three");
        assertArguments("'one\\Btwo'   three", "one\\Btwo", "three");
        assertArguments("'one\\Ctwo'   three", "one\\Ctwo", "three");
        assertArguments("'one\\Dtwo'   three", "one\\Dtwo", "three");
        assertArguments("'one\\Etwo'   three", "one\\Etwo", "three");
        assertArguments("'one\\Ftwo'   three", "one\\Ftwo", "three");
        assertArguments("'one\\Gtwo'   three", "one\\Gtwo", "three");
        assertArguments("'one\\Htwo'   three", "one\\Htwo", "three");
        assertArguments("'one\\Itwo'   three", "one\\Itwo", "three");
        assertArguments("'one\\Jtwo'   three", "one\\Jtwo", "three");
        assertArguments("'one\\Ktwo'   three", "one\\Ktwo", "three");
        assertArguments("'one\\Ltwo'   three", "one\\Ltwo", "three");
        assertArguments("'one\\Mtwo'   three", "one\\Mtwo", "three");
        assertArguments("'one\\Ntwo'   three", "one\\Ntwo", "three");
        assertArguments("'one\\Otwo'   three", "one\\Otwo", "three");
        assertArguments("'one\\Ptwo'   three", "one\\Ptwo", "three");
        assertArguments("'one\\Qtwo'   three", "one\\Qtwo", "three");
        assertArguments("'one\\Rtwo'   three", "one\\Rtwo", "three");
        assertArguments("'one\\Stwo'   three", "one\\Stwo", "three");
        assertArguments("'one\\Ttwo'   three", "one\\Ttwo", "three");
        assertArguments("'one\\Utwo'   three", "one\\Utwo", "three");
        assertArguments("'one\\Vtwo'   three", "one\\Vtwo", "three");
        assertArguments("'one\\Wtwo'   three", "one\\Wtwo", "three");
        assertArguments("'one\\Xtwo'   three", "one\\Xtwo", "three");
        assertArguments("'one\\Ytwo'   three", "one\\Ytwo", "three");
        assertArguments("'one\\Ztwo'   three", "one\\Ztwo", "three");
        assertArguments("'one\\[two'   three", "one\\[two", "three");
        assertArguments("'one\\\\two'   three", "one\\\\two", "three");
        assertArguments("'one\\]two'   three", "one\\]two", "three");
        assertArguments("'one\\^two'   three", "one\\^two", "three");
        assertArguments("'one\\_two'   three", "one\\_two", "three");
        assertArguments("'one\\`two'   three", "one\\`two", "three");
        assertArguments("'one\\atwo'   three", "one\\atwo", "three");
        assertArguments("'one\\btwo'   three", "one\\btwo", "three");
        assertArguments("'one\\ctwo'   three", "one\\ctwo", "three");
        assertArguments("'one\\dtwo'   three", "one\\dtwo", "three");
        assertArguments("'one\\etwo'   three", "one\\etwo", "three");
        assertArguments("'one\\ftwo'   three", "one\\ftwo", "three");
        assertArguments("'one\\gtwo'   three", "one\\gtwo", "three");
        assertArguments("'one\\htwo'   three", "one\\htwo", "three");
        assertArguments("'one\\itwo'   three", "one\\itwo", "three");
        assertArguments("'one\\jtwo'   three", "one\\jtwo", "three");
        assertArguments("'one\\ktwo'   three", "one\\ktwo", "three");
        assertArguments("'one\\ltwo'   three", "one\\ltwo", "three");
        assertArguments("'one\\mtwo'   three", "one\\mtwo", "three");
        assertArguments("'one\\ntwo'   three", "one\\ntwo", "three");
        assertArguments("'one\\otwo'   three", "one\\otwo", "three");
        assertArguments("'one\\ptwo'   three", "one\\ptwo", "three");
        assertArguments("'one\\qtwo'   three", "one\\qtwo", "three");
        assertArguments("'one\\rtwo'   three", "one\\rtwo", "three");
        assertArguments("'one\\stwo'   three", "one\\stwo", "three");
        assertArguments("'one\\ttwo'   three", "one\\ttwo", "three");
        assertArguments("'one\\utwo'   three", "one\\utwo", "three");
        assertArguments("'one\\vtwo'   three", "one\\vtwo", "three");
        assertArguments("'one\\wtwo'   three", "one\\wtwo", "three");
        assertArguments("'one\\xtwo'   three", "one\\xtwo", "three");
        assertArguments("'one\\ytwo'   three", "one\\ytwo", "three");
        assertArguments("'one\\ztwo'   three", "one\\ztwo", "three");
        assertArguments("'one\\{two'   three", "one\\{two", "three");
        assertArguments("'one\\|two'   three", "one\\|two", "three");
        assertArguments("'one\\}two'   three", "one\\}two", "three");
        assertArguments("'one\\~two'   three", "one\\~two", "three");
        assertArguments("'one\\\u007ftwo'   three", "one\\\u007ftwo", "three");
        assertArguments("'one\\\u0080two'   three", "one\\\u0080two", "three");
        assertArguments("'one\\\u0081two'   three", "one\\\u0081two", "three");
        assertArguments("'one\\\u0082two'   three", "one\\\u0082two", "three");
        assertArguments("'one\\\u0083two'   three", "one\\\u0083two", "three");
        assertArguments("'one\\\u0084two'   three", "one\\\u0084two", "three");
        assertArguments("'one\\\u0085two'   three", "one\\\u0085two", "three");
        assertArguments("'one\\\u0086two'   three", "one\\\u0086two", "three");
        assertArguments("'one\\\u0087two'   three", "one\\\u0087two", "three");
        assertArguments("'one\\\u0088two'   three", "one\\\u0088two", "three");
        assertArguments("'one\\\u0089two'   three", "one\\\u0089two", "three");
        assertArguments("'one\\\u008atwo'   three", "one\\\u008atwo", "three");
        assertArguments("'one\\\u008btwo'   three", "one\\\u008btwo", "three");
        assertArguments("'one\\\u008ctwo'   three", "one\\\u008ctwo", "three");
        assertArguments("'one\\\u008dtwo'   three", "one\\\u008dtwo", "three");
        assertArguments("'one\\\u008etwo'   three", "one\\\u008etwo", "three");
        assertArguments("'one\\\u008ftwo'   three", "one\\\u008ftwo", "three");
        assertArguments("'one\\\u0090two'   three", "one\\\u0090two", "three");
        assertArguments("'one\\\u0091two'   three", "one\\\u0091two", "three");
        assertArguments("'one\\\u0092two'   three", "one\\\u0092two", "three");
        assertArguments("'one\\\u0093two'   three", "one\\\u0093two", "three");
        assertArguments("'one\\\u0094two'   three", "one\\\u0094two", "three");
        assertArguments("'one\\\u0095two'   three", "one\\\u0095two", "three");
        assertArguments("'one\\\u0096two'   three", "one\\\u0096two", "three");
        assertArguments("'one\\\u0097two'   three", "one\\\u0097two", "three");
        assertArguments("'one\\\u0098two'   three", "one\\\u0098two", "three");
        assertArguments("'one\\\u0099two'   three", "one\\\u0099two", "three");
        assertArguments("'one\\\u009atwo'   three", "one\\\u009atwo", "three");
        assertArguments("'one\\\u009btwo'   three", "one\\\u009btwo", "three");
        assertArguments("'one\\\u009ctwo'   three", "one\\\u009ctwo", "three");
        assertArguments("'one\\\u009dtwo'   three", "one\\\u009dtwo", "three");
        assertArguments("'one\\\u009etwo'   three", "one\\\u009etwo", "three");
        assertArguments("'one\\\u009ftwo'   three", "one\\\u009ftwo", "three");
        assertArguments("'one\\\u00a0two'   three", "one\\\u00a0two", "three");
        assertArguments("'one\\\u00a1two'   three", "one\\\u00a1two", "three");
        assertArguments("'one\\\u00a2two'   three", "one\\\u00a2two", "three");
        assertArguments("'one\\\u00a3two'   three", "one\\\u00a3two", "three");
        assertArguments("'one\\\u00a4two'   three", "one\\\u00a4two", "three");
        assertArguments("'one\\\u00a5two'   three", "one\\\u00a5two", "three");
        assertArguments("'one\\\u00a6two'   three", "one\\\u00a6two", "three");
        assertArguments("'one\\\u00a7two'   three", "one\\\u00a7two", "three");
        assertArguments("'one\\\u00a8two'   three", "one\\\u00a8two", "three");
        assertArguments("'one\\\u00a9two'   three", "one\\\u00a9two", "three");
        assertArguments("'one\\\u00aatwo'   three", "one\\\u00aatwo", "three");
        assertArguments("'one\\\u00abtwo'   three", "one\\\u00abtwo", "three");
        assertArguments("'one\\\u00actwo'   three", "one\\\u00actwo", "three");
        assertArguments("'one\\\u00adtwo'   three", "one\\\u00adtwo", "three");
        assertArguments("'one\\\u00aetwo'   three", "one\\\u00aetwo", "three");
        assertArguments("'one\\\u00aftwo'   three", "one\\\u00aftwo", "three");
        assertArguments("'one\\\u00b0two'   three", "one\\\u00b0two", "three");
        assertArguments("'one\\\u00b1two'   three", "one\\\u00b1two", "three");
        assertArguments("'one\\\u00b2two'   three", "one\\\u00b2two", "three");
        assertArguments("'one\\\u00b3two'   three", "one\\\u00b3two", "three");
        assertArguments("'one\\\u00b4two'   three", "one\\\u00b4two", "three");
        assertArguments("'one\\\u00b5two'   three", "one\\\u00b5two", "three");
        assertArguments("'one\\\u00b6two'   three", "one\\\u00b6two", "three");
        assertArguments("'one\\\u00b7two'   three", "one\\\u00b7two", "three");
        assertArguments("'one\\\u00b8two'   three", "one\\\u00b8two", "three");
        assertArguments("'one\\\u00b9two'   three", "one\\\u00b9two", "three");
        assertArguments("'one\\\u00batwo'   three", "one\\\u00batwo", "three");
        assertArguments("'one\\\u00bbtwo'   three", "one\\\u00bbtwo", "three");
        assertArguments("'one\\\u00bctwo'   three", "one\\\u00bctwo", "three");
        assertArguments("'one\\\u00bdtwo'   three", "one\\\u00bdtwo", "three");
        assertArguments("'one\\\u00betwo'   three", "one\\\u00betwo", "three");
        assertArguments("'one\\\u00bftwo'   three", "one\\\u00bftwo", "three");
        assertArguments("'one\\\u00c0two'   three", "one\\\u00c0two", "three");
        assertArguments("'one\\\u00c1two'   three", "one\\\u00c1two", "three");
        assertArguments("'one\\\u00c2two'   three", "one\\\u00c2two", "three");
        assertArguments("'one\\\u00c3two'   three", "one\\\u00c3two", "three");
        assertArguments("'one\\\u00c4two'   three", "one\\\u00c4two", "three");
        assertArguments("'one\\\u00c5two'   three", "one\\\u00c5two", "three");
        assertArguments("'one\\\u00c6two'   three", "one\\\u00c6two", "three");
        assertArguments("'one\\\u00c7two'   three", "one\\\u00c7two", "three");
        assertArguments("'one\\\u00c8two'   three", "one\\\u00c8two", "three");
        assertArguments("'one\\\u00c9two'   three", "one\\\u00c9two", "three");
        assertArguments("'one\\\u00catwo'   three", "one\\\u00catwo", "three");
        assertArguments("'one\\\u00cbtwo'   three", "one\\\u00cbtwo", "three");
        assertArguments("'one\\\u00cctwo'   three", "one\\\u00cctwo", "three");
        assertArguments("'one\\\u00cdtwo'   three", "one\\\u00cdtwo", "three");
        assertArguments("'one\\\u00cetwo'   three", "one\\\u00cetwo", "three");
        assertArguments("'one\\\u00cftwo'   three", "one\\\u00cftwo", "three");
        assertArguments("'one\\\u00d0two'   three", "one\\\u00d0two", "three");
        assertArguments("'one\\\u00d1two'   three", "one\\\u00d1two", "three");
        assertArguments("'one\\\u00d2two'   three", "one\\\u00d2two", "three");
        assertArguments("'one\\\u00d3two'   three", "one\\\u00d3two", "three");
        assertArguments("'one\\\u00d4two'   three", "one\\\u00d4two", "three");
        assertArguments("'one\\\u00d5two'   three", "one\\\u00d5two", "three");
        assertArguments("'one\\\u00d6two'   three", "one\\\u00d6two", "three");
        assertArguments("'one\\\u00d7two'   three", "one\\\u00d7two", "three");
        assertArguments("'one\\\u00d8two'   three", "one\\\u00d8two", "three");
        assertArguments("'one\\\u00d9two'   three", "one\\\u00d9two", "three");
        assertArguments("'one\\\u00datwo'   three", "one\\\u00datwo", "three");
        assertArguments("'one\\\u00dbtwo'   three", "one\\\u00dbtwo", "three");
        assertArguments("'one\\\u00dctwo'   three", "one\\\u00dctwo", "three");
        assertArguments("'one\\\u00ddtwo'   three", "one\\\u00ddtwo", "three");
        assertArguments("'one\\\u00detwo'   three", "one\\\u00detwo", "three");
        assertArguments("'one\\\u00dftwo'   three", "one\\\u00dftwo", "three");
        assertArguments("'one\\\u00e0two'   three", "one\\\u00e0two", "three");
        assertArguments("'one\\\u00e1two'   three", "one\\\u00e1two", "three");
        assertArguments("'one\\\u00e2two'   three", "one\\\u00e2two", "three");
        assertArguments("'one\\\u00e3two'   three", "one\\\u00e3two", "three");
        assertArguments("'one\\\u00e4two'   three", "one\\\u00e4two", "three");
        assertArguments("'one\\\u00e5two'   three", "one\\\u00e5two", "three");
        assertArguments("'one\\\u00e6two'   three", "one\\\u00e6two", "three");
        assertArguments("'one\\\u00e7two'   three", "one\\\u00e7two", "three");
        assertArguments("'one\\\u00e8two'   three", "one\\\u00e8two", "three");
        assertArguments("'one\\\u00e9two'   three", "one\\\u00e9two", "three");
        assertArguments("'one\\\u00eatwo'   three", "one\\\u00eatwo", "three");
        assertArguments("'one\\\u00ebtwo'   three", "one\\\u00ebtwo", "three");
        assertArguments("'one\\\u00ectwo'   three", "one\\\u00ectwo", "three");
        assertArguments("'one\\\u00edtwo'   three", "one\\\u00edtwo", "three");
        assertArguments("'one\\\u00eetwo'   three", "one\\\u00eetwo", "three");
        assertArguments("'one\\\u00eftwo'   three", "one\\\u00eftwo", "three");
        assertArguments("'one\\\u00f0two'   three", "one\\\u00f0two", "three");
        assertArguments("'one\\\u00f1two'   three", "one\\\u00f1two", "three");
        assertArguments("'one\\\u00f2two'   three", "one\\\u00f2two", "three");
        assertArguments("'one\\\u00f3two'   three", "one\\\u00f3two", "three");
        assertArguments("'one\\\u00f4two'   three", "one\\\u00f4two", "three");
        assertArguments("'one\\\u00f5two'   three", "one\\\u00f5two", "three");
        assertArguments("'one\\\u00f6two'   three", "one\\\u00f6two", "three");
        assertArguments("'one\\\u00f7two'   three", "one\\\u00f7two", "three");
        assertArguments("'one\\\u00f8two'   three", "one\\\u00f8two", "three");
        assertArguments("'one\\\u00f9two'   three", "one\\\u00f9two", "three");
        assertArguments("'one\\\u00fatwo'   three", "one\\\u00fatwo", "three");
        assertArguments("'one\\\u00fbtwo'   three", "one\\\u00fbtwo", "three");
        assertArguments("'one\\\u00fctwo'   three", "one\\\u00fctwo", "three");
        assertArguments("'one\\\u00fdtwo'   three", "one\\\u00fdtwo", "three");
        assertArguments("'one\\\u00fetwo'   three", "one\\\u00fetwo", "three");
        assertArguments("'one\\\u00fftwo'   three", "one\\\u00fftwo", "three");
        assertArguments("\"one\u0000two\"   three", "onetwo", "three");
        assertArguments("\"one\u0001two\"   three", "one\u0001two", "three");
        assertArguments("\"one\u0002two\"   three", "one\u0002two", "three");
        assertArguments("\"one\u0003two\"   three", "one\u0003two", "three");
        assertArguments("\"one\u0004two\"   three", "one\u0004two", "three");
        assertArguments("\"one\u0005two\"   three", "one\u0005two", "three");
        assertArguments("\"one\u0006two\"   three", "one\u0006two", "three");
        assertArguments("\"one\u0007two\"   three", "one\u0007two", "three");
        assertArguments("\"one\btwo\"   three", "one\btwo", "three");
        assertArguments("\"one\ttwo\"   three", "one\ttwo", "three");
        assertArguments("\"one\ntwo\"   three", "one\ntwo", "three");
        assertArguments("\"one\u000btwo\"   three", "one\u000btwo", "three");
        assertArguments("\"one\ftwo\"   three", "one\ftwo", "three");
        assertArguments("\"one\rtwo\"   three", "one\rtwo", "three");
        assertArguments("\"one\u000etwo\"   three", "one\u000etwo", "three");
        assertArguments("\"one\u000ftwo\"   three", "one\u000ftwo", "three");
        assertArguments("\"one\u0010two\"   three", "one\u0010two", "three");
        assertArguments("\"one\u0011two\"   three", "one\u0011two", "three");
        assertArguments("\"one\u0012two\"   three", "one\u0012two", "three");
        assertArguments("\"one\u0013two\"   three", "one\u0013two", "three");
        assertArguments("\"one\u0014two\"   three", "one\u0014two", "three");
        assertArguments("\"one\u0015two\"   three", "one\u0015two", "three");
        assertArguments("\"one\u0016two\"   three", "one\u0016two", "three");
        assertArguments("\"one\u0017two\"   three", "one\u0017two", "three");
        assertArguments("\"one\u0018two\"   three", "one\u0018two", "three");
        assertArguments("\"one\u0019two\"   three", "one\u0019two", "three");
        assertArguments("\"one\u001atwo\"   three", "one\u001atwo", "three");
        assertArguments("\"one\u001btwo\"   three", "one\u001btwo", "three");
        assertArguments("\"one\u001ctwo\"   three", "one\u001ctwo", "three");
        assertArguments("\"one\u001dtwo\"   three", "one\u001dtwo", "three");
        assertArguments("\"one\u001etwo\"   three", "one\u001etwo", "three");
        assertArguments("\"one\u001ftwo\"   three", "one\u001ftwo", "three");
        assertArguments("\"one two\"   three", "one two", "three");
        assertArguments("\"one!two\"   three", "one!two", "three");
        assertInvalidArguments("\"one\"two\"   three");
        assertArguments("\"one#two\"   three", "one#two", "three");
        assertArguments("\"one$two\"   three", "one", "three");
        assertArguments("\"one%two\"   three", "one%two", "three");
        assertArguments("\"one&two\"   three", "one&two", "three");
        assertArguments("\"one'two\"   three", "one'two", "three");
        assertArguments("\"one(two\"   three", "one(two", "three");
        assertArguments("\"one)two\"   three", "one)two", "three");
        assertArguments("\"one*two\"   three", "one*two", "three");
        assertArguments("\"one+two\"   three", "one+two", "three");
        assertArguments("\"one,two\"   three", "one,two", "three");
        assertArguments("\"one-two\"   three", "one-two", "three");
        assertArguments("\"one.two\"   three", "one.two", "three");
        assertArguments("\"one/two\"   three", "one/two", "three");
        assertArguments("\"one0two\"   three", "one0two", "three");
        assertArguments("\"one1two\"   three", "one1two", "three");
        assertArguments("\"one2two\"   three", "one2two", "three");
        assertArguments("\"one3two\"   three", "one3two", "three");
        assertArguments("\"one4two\"   three", "one4two", "three");
        assertArguments("\"one5two\"   three", "one5two", "three");
        assertArguments("\"one6two\"   three", "one6two", "three");
        assertArguments("\"one7two\"   three", "one7two", "three");
        assertArguments("\"one8two\"   three", "one8two", "three");
        assertArguments("\"one9two\"   three", "one9two", "three");
        assertArguments("\"one:two\"   three", "one:two", "three");
        assertArguments("\"one;two\"   three", "one;two", "three");
        assertArguments("\"one<two\"   three", "one<two", "three");
        assertArguments("\"one=two\"   three", "one=two", "three");
        assertArguments("\"one>two\"   three", "one>two", "three");
        assertArguments("\"one?two\"   three", "one?two", "three");
        assertArguments("\"one@two\"   three", "one@two", "three");
        assertArguments("\"oneAtwo\"   three", "oneAtwo", "three");
        assertArguments("\"oneBtwo\"   three", "oneBtwo", "three");
        assertArguments("\"oneCtwo\"   three", "oneCtwo", "three");
        assertArguments("\"oneDtwo\"   three", "oneDtwo", "three");
        assertArguments("\"oneEtwo\"   three", "oneEtwo", "three");
        assertArguments("\"oneFtwo\"   three", "oneFtwo", "three");
        assertArguments("\"oneGtwo\"   three", "oneGtwo", "three");
        assertArguments("\"oneHtwo\"   three", "oneHtwo", "three");
        assertArguments("\"oneItwo\"   three", "oneItwo", "three");
        assertArguments("\"oneJtwo\"   three", "oneJtwo", "three");
        assertArguments("\"oneKtwo\"   three", "oneKtwo", "three");
        assertArguments("\"oneLtwo\"   three", "oneLtwo", "three");
        assertArguments("\"oneMtwo\"   three", "oneMtwo", "three");
        assertArguments("\"oneNtwo\"   three", "oneNtwo", "three");
        assertArguments("\"oneOtwo\"   three", "oneOtwo", "three");
        assertArguments("\"onePtwo\"   three", "onePtwo", "three");
        assertArguments("\"oneQtwo\"   three", "oneQtwo", "three");
        assertArguments("\"oneRtwo\"   three", "oneRtwo", "three");
        assertArguments("\"oneStwo\"   three", "oneStwo", "three");
        assertArguments("\"oneTtwo\"   three", "oneTtwo", "three");
        assertArguments("\"oneUtwo\"   three", "oneUtwo", "three");
        assertArguments("\"oneVtwo\"   three", "oneVtwo", "three");
        assertArguments("\"oneWtwo\"   three", "oneWtwo", "three");
        assertArguments("\"oneXtwo\"   three", "oneXtwo", "three");
        assertArguments("\"oneYtwo\"   three", "oneYtwo", "three");
        assertArguments("\"oneZtwo\"   three", "oneZtwo", "three");
        assertArguments("\"one[two\"   three", "one[two", "three");
        assertArguments("\"one\\two\"   three", "one\\two", "three");
        assertArguments("\"one]two\"   three", "one]two", "three");
        assertArguments("\"one^two\"   three", "one^two", "three");
        assertArguments("\"one_two\"   three", "one_two", "three");
        assertInvalidArguments("\"one`two\"   three");
        assertArguments("\"oneatwo\"   three", "oneatwo", "three");
        assertArguments("\"onebtwo\"   three", "onebtwo", "three");
        assertArguments("\"onectwo\"   three", "onectwo", "three");
        assertArguments("\"onedtwo\"   three", "onedtwo", "three");
        assertArguments("\"oneetwo\"   three", "oneetwo", "three");
        assertArguments("\"oneftwo\"   three", "oneftwo", "three");
        assertArguments("\"onegtwo\"   three", "onegtwo", "three");
        assertArguments("\"onehtwo\"   three", "onehtwo", "three");
        assertArguments("\"oneitwo\"   three", "oneitwo", "three");
        assertArguments("\"onejtwo\"   three", "onejtwo", "three");
        assertArguments("\"onektwo\"   three", "onektwo", "three");
        assertArguments("\"oneltwo\"   three", "oneltwo", "three");
        assertArguments("\"onemtwo\"   three", "onemtwo", "three");
        assertArguments("\"onentwo\"   three", "onentwo", "three");
        assertArguments("\"oneotwo\"   three", "oneotwo", "three");
        assertArguments("\"oneptwo\"   three", "oneptwo", "three");
        assertArguments("\"oneqtwo\"   three", "oneqtwo", "three");
        assertArguments("\"onertwo\"   three", "onertwo", "three");
        assertArguments("\"onestwo\"   three", "onestwo", "three");
        assertArguments("\"onettwo\"   three", "onettwo", "three");
        assertArguments("\"oneutwo\"   three", "oneutwo", "three");
        assertArguments("\"onevtwo\"   three", "onevtwo", "three");
        assertArguments("\"onewtwo\"   three", "onewtwo", "three");
        assertArguments("\"onextwo\"   three", "onextwo", "three");
        assertArguments("\"oneytwo\"   three", "oneytwo", "three");
        assertArguments("\"oneztwo\"   three", "oneztwo", "three");
        assertArguments("\"one{two\"   three", "one{two", "three");
        assertArguments("\"one|two\"   three", "one|two", "three");
        assertArguments("\"one}two\"   three", "one}two", "three");
        assertArguments("\"one~two\"   three", "one~two", "three");
        assertArguments("\"one\u007ftwo\"   three", "one\u007ftwo", "three");
        assertArguments("\"one\u0080two\"   three", "one\u0080two", "three");
        assertArguments("\"one\u0081two\"   three", "one\u0081two", "three");
        assertArguments("\"one\u0082two\"   three", "one\u0082two", "three");
        assertArguments("\"one\u0083two\"   three", "one\u0083two", "three");
        assertArguments("\"one\u0084two\"   three", "one\u0084two", "three");
        assertArguments("\"one\u0085two\"   three", "one\u0085two", "three");
        assertArguments("\"one\u0086two\"   three", "one\u0086two", "three");
        assertArguments("\"one\u0087two\"   three", "one\u0087two", "three");
        assertArguments("\"one\u0088two\"   three", "one\u0088two", "three");
        assertArguments("\"one\u0089two\"   three", "one\u0089two", "three");
        assertArguments("\"one\u008atwo\"   three", "one\u008atwo", "three");
        assertArguments("\"one\u008btwo\"   three", "one\u008btwo", "three");
        assertArguments("\"one\u008ctwo\"   three", "one\u008ctwo", "three");
        assertArguments("\"one\u008dtwo\"   three", "one\u008dtwo", "three");
        assertArguments("\"one\u008etwo\"   three", "one\u008etwo", "three");
        assertArguments("\"one\u008ftwo\"   three", "one\u008ftwo", "three");
        assertArguments("\"one\u0090two\"   three", "one\u0090two", "three");
        assertArguments("\"one\u0091two\"   three", "one\u0091two", "three");
        assertArguments("\"one\u0092two\"   three", "one\u0092two", "three");
        assertArguments("\"one\u0093two\"   three", "one\u0093two", "three");
        assertArguments("\"one\u0094two\"   three", "one\u0094two", "three");
        assertArguments("\"one\u0095two\"   three", "one\u0095two", "three");
        assertArguments("\"one\u0096two\"   three", "one\u0096two", "three");
        assertArguments("\"one\u0097two\"   three", "one\u0097two", "three");
        assertArguments("\"one\u0098two\"   three", "one\u0098two", "three");
        assertArguments("\"one\u0099two\"   three", "one\u0099two", "three");
        assertArguments("\"one\u009atwo\"   three", "one\u009atwo", "three");
        assertArguments("\"one\u009btwo\"   three", "one\u009btwo", "three");
        assertArguments("\"one\u009ctwo\"   three", "one\u009ctwo", "three");
        assertArguments("\"one\u009dtwo\"   three", "one\u009dtwo", "three");
        assertArguments("\"one\u009etwo\"   three", "one\u009etwo", "three");
        assertArguments("\"one\u009ftwo\"   three", "one\u009ftwo", "three");
        assertArguments("\"one\u00a0two\"   three", "one\u00a0two", "three");
        assertArguments("\"one\u00a1two\"   three", "one\u00a1two", "three");
        assertArguments("\"one\u00a2two\"   three", "one\u00a2two", "three");
        assertArguments("\"one\u00a3two\"   three", "one\u00a3two", "three");
        assertArguments("\"one\u00a4two\"   three", "one\u00a4two", "three");
        assertArguments("\"one\u00a5two\"   three", "one\u00a5two", "three");
        assertArguments("\"one\u00a6two\"   three", "one\u00a6two", "three");
        assertArguments("\"one\u00a7two\"   three", "one\u00a7two", "three");
        assertArguments("\"one\u00a8two\"   three", "one\u00a8two", "three");
        assertArguments("\"one\u00a9two\"   three", "one\u00a9two", "three");
        assertArguments("\"one\u00aatwo\"   three", "one\u00aatwo", "three");
        assertArguments("\"one\u00abtwo\"   three", "one\u00abtwo", "three");
        assertArguments("\"one\u00actwo\"   three", "one\u00actwo", "three");
        assertArguments("\"one\u00adtwo\"   three", "one\u00adtwo", "three");
        assertArguments("\"one\u00aetwo\"   three", "one\u00aetwo", "three");
        assertArguments("\"one\u00aftwo\"   three", "one\u00aftwo", "three");
        assertArguments("\"one\u00b0two\"   three", "one\u00b0two", "three");
        assertArguments("\"one\u00b1two\"   three", "one\u00b1two", "three");
        assertArguments("\"one\u00b2two\"   three", "one\u00b2two", "three");
        assertArguments("\"one\u00b3two\"   three", "one\u00b3two", "three");
        assertArguments("\"one\u00b4two\"   three", "one\u00b4two", "three");
        assertArguments("\"one\u00b5two\"   three", "one\u00b5two", "three");
        assertArguments("\"one\u00b6two\"   three", "one\u00b6two", "three");
        assertArguments("\"one\u00b7two\"   three", "one\u00b7two", "three");
        assertArguments("\"one\u00b8two\"   three", "one\u00b8two", "three");
        assertArguments("\"one\u00b9two\"   three", "one\u00b9two", "three");
        assertArguments("\"one\u00batwo\"   three", "one\u00batwo", "three");
        assertArguments("\"one\u00bbtwo\"   three", "one\u00bbtwo", "three");
        assertArguments("\"one\u00bctwo\"   three", "one\u00bctwo", "three");
        assertArguments("\"one\u00bdtwo\"   three", "one\u00bdtwo", "three");
        assertArguments("\"one\u00betwo\"   three", "one\u00betwo", "three");
        assertArguments("\"one\u00bftwo\"   three", "one\u00bftwo", "three");
        assertArguments("\"one\u00c0two\"   three", "one\u00c0two", "three");
        assertArguments("\"one\u00c1two\"   three", "one\u00c1two", "three");
        assertArguments("\"one\u00c2two\"   three", "one\u00c2two", "three");
        assertArguments("\"one\u00c3two\"   three", "one\u00c3two", "three");
        assertArguments("\"one\u00c4two\"   three", "one\u00c4two", "three");
        assertArguments("\"one\u00c5two\"   three", "one\u00c5two", "three");
        assertArguments("\"one\u00c6two\"   three", "one\u00c6two", "three");
        assertArguments("\"one\u00c7two\"   three", "one\u00c7two", "three");
        assertArguments("\"one\u00c8two\"   three", "one\u00c8two", "three");
        assertArguments("\"one\u00c9two\"   three", "one\u00c9two", "three");
        assertArguments("\"one\u00catwo\"   three", "one\u00catwo", "three");
        assertArguments("\"one\u00cbtwo\"   three", "one\u00cbtwo", "three");
        assertArguments("\"one\u00cctwo\"   three", "one\u00cctwo", "three");
        assertArguments("\"one\u00cdtwo\"   three", "one\u00cdtwo", "three");
        assertArguments("\"one\u00cetwo\"   three", "one\u00cetwo", "three");
        assertArguments("\"one\u00cftwo\"   three", "one\u00cftwo", "three");
        assertArguments("\"one\u00d0two\"   three", "one\u00d0two", "three");
        assertArguments("\"one\u00d1two\"   three", "one\u00d1two", "three");
        assertArguments("\"one\u00d2two\"   three", "one\u00d2two", "three");
        assertArguments("\"one\u00d3two\"   three", "one\u00d3two", "three");
        assertArguments("\"one\u00d4two\"   three", "one\u00d4two", "three");
        assertArguments("\"one\u00d5two\"   three", "one\u00d5two", "three");
        assertArguments("\"one\u00d6two\"   three", "one\u00d6two", "three");
        assertArguments("\"one\u00d7two\"   three", "one\u00d7two", "three");
        assertArguments("\"one\u00d8two\"   three", "one\u00d8two", "three");
        assertArguments("\"one\u00d9two\"   three", "one\u00d9two", "three");
        assertArguments("\"one\u00datwo\"   three", "one\u00datwo", "three");
        assertArguments("\"one\u00dbtwo\"   three", "one\u00dbtwo", "three");
        assertArguments("\"one\u00dctwo\"   three", "one\u00dctwo", "three");
        assertArguments("\"one\u00ddtwo\"   three", "one\u00ddtwo", "three");
        assertArguments("\"one\u00detwo\"   three", "one\u00detwo", "three");
        assertArguments("\"one\u00dftwo\"   three", "one\u00dftwo", "three");
        assertArguments("\"one\u00e0two\"   three", "one\u00e0two", "three");
        assertArguments("\"one\u00e1two\"   three", "one\u00e1two", "three");
        assertArguments("\"one\u00e2two\"   three", "one\u00e2two", "three");
        assertArguments("\"one\u00e3two\"   three", "one\u00e3two", "three");
        assertArguments("\"one\u00e4two\"   three", "one\u00e4two", "three");
        assertArguments("\"one\u00e5two\"   three", "one\u00e5two", "three");
        assertArguments("\"one\u00e6two\"   three", "one\u00e6two", "three");
        assertArguments("\"one\u00e7two\"   three", "one\u00e7two", "three");
        assertArguments("\"one\u00e8two\"   three", "one\u00e8two", "three");
        assertArguments("\"one\u00e9two\"   three", "one\u00e9two", "three");
        assertArguments("\"one\u00eatwo\"   three", "one\u00eatwo", "three");
        assertArguments("\"one\u00ebtwo\"   three", "one\u00ebtwo", "three");
        assertArguments("\"one\u00ectwo\"   three", "one\u00ectwo", "three");
        assertArguments("\"one\u00edtwo\"   three", "one\u00edtwo", "three");
        assertArguments("\"one\u00eetwo\"   three", "one\u00eetwo", "three");
        assertArguments("\"one\u00eftwo\"   three", "one\u00eftwo", "three");
        assertArguments("\"one\u00f0two\"   three", "one\u00f0two", "three");
        assertArguments("\"one\u00f1two\"   three", "one\u00f1two", "three");
        assertArguments("\"one\u00f2two\"   three", "one\u00f2two", "three");
        assertArguments("\"one\u00f3two\"   three", "one\u00f3two", "three");
        assertArguments("\"one\u00f4two\"   three", "one\u00f4two", "three");
        assertArguments("\"one\u00f5two\"   three", "one\u00f5two", "three");
        assertArguments("\"one\u00f6two\"   three", "one\u00f6two", "three");
        assertArguments("\"one\u00f7two\"   three", "one\u00f7two", "three");
        assertArguments("\"one\u00f8two\"   three", "one\u00f8two", "three");
        assertArguments("\"one\u00f9two\"   three", "one\u00f9two", "three");
        assertArguments("\"one\u00fatwo\"   three", "one\u00fatwo", "three");
        assertArguments("\"one\u00fbtwo\"   three", "one\u00fbtwo", "three");
        assertArguments("\"one\u00fctwo\"   three", "one\u00fctwo", "three");
        assertArguments("\"one\u00fdtwo\"   three", "one\u00fdtwo", "three");
        assertArguments("\"one\u00fetwo\"   three", "one\u00fetwo", "three");
        assertArguments("\"one\u00fftwo\"   three", "one\u00fftwo", "three");
        assertArguments("\"one\\\u0000two\"   three", "one\\two", "three");
        assertArguments("\"one\\\u0001two\"   three", "one\\\u0001two", "three");
        assertArguments("\"one\\\u0002two\"   three", "one\\\u0002two", "three");
        assertArguments("\"one\\\u0003two\"   three", "one\\\u0003two", "three");
        assertArguments("\"one\\\u0004two\"   three", "one\\\u0004two", "three");
        assertArguments("\"one\\\u0005two\"   three", "one\\\u0005two", "three");
        assertArguments("\"one\\\u0006two\"   three", "one\\\u0006two", "three");
        assertArguments("\"one\\\u0007two\"   three", "one\\\u0007two", "three");
        assertArguments("\"one\\\btwo\"   three", "one\\\btwo", "three");
        assertArguments("\"one\\\ttwo\"   three", "one\\\ttwo", "three");
        assertArguments("\"one\\\ntwo\"   three", "onetwo", "three");
        assertArguments("\"one\\\u000btwo\"   three", "one\\\u000btwo", "three");
        assertArguments("\"one\\\ftwo\"   three", "one\\\ftwo", "three");
        assertArguments("\"one\\\rtwo\"   three", "one\\\rtwo", "three");
        assertArguments("\"one\\\u000etwo\"   three", "one\\\u000etwo", "three");
        assertArguments("\"one\\\u000ftwo\"   three", "one\\\u000ftwo", "three");
        assertArguments("\"one\\\u0010two\"   three", "one\\\u0010two", "three");
        assertArguments("\"one\\\u0011two\"   three", "one\\\u0011two", "three");
        assertArguments("\"one\\\u0012two\"   three", "one\\\u0012two", "three");
        assertArguments("\"one\\\u0013two\"   three", "one\\\u0013two", "three");
        assertArguments("\"one\\\u0014two\"   three", "one\\\u0014two", "three");
        assertArguments("\"one\\\u0015two\"   three", "one\\\u0015two", "three");
        assertArguments("\"one\\\u0016two\"   three", "one\\\u0016two", "three");
        assertArguments("\"one\\\u0017two\"   three", "one\\\u0017two", "three");
        assertArguments("\"one\\\u0018two\"   three", "one\\\u0018two", "three");
        assertArguments("\"one\\\u0019two\"   three", "one\\\u0019two", "three");
        assertArguments("\"one\\\u001atwo\"   three", "one\\\u001atwo", "three");
        assertArguments("\"one\\\u001btwo\"   three", "one\\\u001btwo", "three");
        assertArguments("\"one\\\u001ctwo\"   three", "one\\\u001ctwo", "three");
        assertArguments("\"one\\\u001dtwo\"   three", "one\\\u001dtwo", "three");
        assertArguments("\"one\\\u001etwo\"   three", "one\\\u001etwo", "three");
        assertArguments("\"one\\\u001ftwo\"   three", "one\\\u001ftwo", "three");
        assertArguments("\"one\\ two\"   three", "one\\ two", "three");
        assertArguments("\"one\\!two\"   three", "one\\!two", "three");
        assertArguments("\"one\\\"two\"   three", "one\"two", "three");
        assertArguments("\"one\\#two\"   three", "one\\#two", "three");
        assertArguments("\"one\\$two\"   three", "one$two", "three");
        assertArguments("\"one\\%two\"   three", "one\\%two", "three");
        assertArguments("\"one\\&two\"   three", "one\\&two", "three");
        assertArguments("\"one\\'two\"   three", "one\\'two", "three");
        assertArguments("\"one\\(two\"   three", "one\\(two", "three");
        assertArguments("\"one\\)two\"   three", "one\\)two", "three");
        assertArguments("\"one\\*two\"   three", "one\\*two", "three");
        assertArguments("\"one\\+two\"   three", "one\\+two", "three");
        assertArguments("\"one\\,two\"   three", "one\\,two", "three");
        assertArguments("\"one\\-two\"   three", "one\\-two", "three");
        assertArguments("\"one\\.two\"   three", "one\\.two", "three");
        assertArguments("\"one\\/two\"   three", "one\\/two", "three");
        assertArguments("\"one\\0two\"   three", "one\\0two", "three");
        assertArguments("\"one\\1two\"   three", "one\\1two", "three");
        assertArguments("\"one\\2two\"   three", "one\\2two", "three");
        assertArguments("\"one\\3two\"   three", "one\\3two", "three");
        assertArguments("\"one\\4two\"   three", "one\\4two", "three");
        assertArguments("\"one\\5two\"   three", "one\\5two", "three");
        assertArguments("\"one\\6two\"   three", "one\\6two", "three");
        assertArguments("\"one\\7two\"   three", "one\\7two", "three");
        assertArguments("\"one\\8two\"   three", "one\\8two", "three");
        assertArguments("\"one\\9two\"   three", "one\\9two", "three");
        assertArguments("\"one\\:two\"   three", "one\\:two", "three");
        assertArguments("\"one\\;two\"   three", "one\\;two", "three");
        assertArguments("\"one\\<two\"   three", "one\\<two", "three");
        assertArguments("\"one\\=two\"   three", "one\\=two", "three");
        assertArguments("\"one\\>two\"   three", "one\\>two", "three");
        assertArguments("\"one\\?two\"   three", "one\\?two", "three");
        assertArguments("\"one\\@two\"   three", "one\\@two", "three");
        assertArguments("\"one\\Atwo\"   three", "one\\Atwo", "three");
        assertArguments("\"one\\Btwo\"   three", "one\\Btwo", "three");
        assertArguments("\"one\\Ctwo\"   three", "one\\Ctwo", "three");
        assertArguments("\"one\\Dtwo\"   three", "one\\Dtwo", "three");
        assertArguments("\"one\\Etwo\"   three", "one\\Etwo", "three");
        assertArguments("\"one\\Ftwo\"   three", "one\\Ftwo", "three");
        assertArguments("\"one\\Gtwo\"   three", "one\\Gtwo", "three");
        assertArguments("\"one\\Htwo\"   three", "one\\Htwo", "three");
        assertArguments("\"one\\Itwo\"   three", "one\\Itwo", "three");
        assertArguments("\"one\\Jtwo\"   three", "one\\Jtwo", "three");
        assertArguments("\"one\\Ktwo\"   three", "one\\Ktwo", "three");
        assertArguments("\"one\\Ltwo\"   three", "one\\Ltwo", "three");
        assertArguments("\"one\\Mtwo\"   three", "one\\Mtwo", "three");
        assertArguments("\"one\\Ntwo\"   three", "one\\Ntwo", "three");
        assertArguments("\"one\\Otwo\"   three", "one\\Otwo", "three");
        assertArguments("\"one\\Ptwo\"   three", "one\\Ptwo", "three");
        assertArguments("\"one\\Qtwo\"   three", "one\\Qtwo", "three");
        assertArguments("\"one\\Rtwo\"   three", "one\\Rtwo", "three");
        assertArguments("\"one\\Stwo\"   three", "one\\Stwo", "three");
        assertArguments("\"one\\Ttwo\"   three", "one\\Ttwo", "three");
        assertArguments("\"one\\Utwo\"   three", "one\\Utwo", "three");
        assertArguments("\"one\\Vtwo\"   three", "one\\Vtwo", "three");
        assertArguments("\"one\\Wtwo\"   three", "one\\Wtwo", "three");
        assertArguments("\"one\\Xtwo\"   three", "one\\Xtwo", "three");
        assertArguments("\"one\\Ytwo\"   three", "one\\Ytwo", "three");
        assertArguments("\"one\\Ztwo\"   three", "one\\Ztwo", "three");
        assertArguments("\"one\\[two\"   three", "one\\[two", "three");
        assertArguments("\"one\\\\two\"   three", "one\\two", "three");
        assertArguments("\"one\\]two\"   three", "one\\]two", "three");
        assertArguments("\"one\\^two\"   three", "one\\^two", "three");
        assertArguments("\"one\\_two\"   three", "one\\_two", "three");
        assertArguments("\"one\\`two\"   three", "one`two", "three");
        assertArguments("\"one\\atwo\"   three", "one\\atwo", "three");
        assertArguments("\"one\\btwo\"   three", "one\\btwo", "three");
        assertArguments("\"one\\ctwo\"   three", "one\\ctwo", "three");
        assertArguments("\"one\\dtwo\"   three", "one\\dtwo", "three");
        assertArguments("\"one\\etwo\"   three", "one\\etwo", "three");
        assertArguments("\"one\\ftwo\"   three", "one\\ftwo", "three");
        assertArguments("\"one\\gtwo\"   three", "one\\gtwo", "three");
        assertArguments("\"one\\htwo\"   three", "one\\htwo", "three");
        assertArguments("\"one\\itwo\"   three", "one\\itwo", "three");
        assertArguments("\"one\\jtwo\"   three", "one\\jtwo", "three");
        assertArguments("\"one\\ktwo\"   three", "one\\ktwo", "three");
        assertArguments("\"one\\ltwo\"   three", "one\\ltwo", "three");
        assertArguments("\"one\\mtwo\"   three", "one\\mtwo", "three");
        assertArguments("\"one\\ntwo\"   three", "one\\ntwo", "three");
        assertArguments("\"one\\otwo\"   three", "one\\otwo", "three");
        assertArguments("\"one\\ptwo\"   three", "one\\ptwo", "three");
        assertArguments("\"one\\qtwo\"   three", "one\\qtwo", "three");
        assertArguments("\"one\\rtwo\"   three", "one\\rtwo", "three");
        assertArguments("\"one\\stwo\"   three", "one\\stwo", "three");
        assertArguments("\"one\\ttwo\"   three", "one\\ttwo", "three");
        assertArguments("\"one\\utwo\"   three", "one\\utwo", "three");
        assertArguments("\"one\\vtwo\"   three", "one\\vtwo", "three");
        assertArguments("\"one\\wtwo\"   three", "one\\wtwo", "three");
        assertArguments("\"one\\xtwo\"   three", "one\\xtwo", "three");
        assertArguments("\"one\\ytwo\"   three", "one\\ytwo", "three");
        assertArguments("\"one\\ztwo\"   three", "one\\ztwo", "three");
        assertArguments("\"one\\{two\"   three", "one\\{two", "three");
        assertArguments("\"one\\|two\"   three", "one\\|two", "three");
        assertArguments("\"one\\}two\"   three", "one\\}two", "three");
        assertArguments("\"one\\~two\"   three", "one\\~two", "three");
        assertArguments("\"one\\\u007ftwo\"   three", "one\\\u0001\u007ftwo", "three");
        assertArguments("\"one\\\u0080two\"   three", "one\\\u0080two", "three");
        assertArguments("\"one\\\u0081two\"   three", "one\\\u0081two", "three");
        assertArguments("\"one\\\u0082two\"   three", "one\\\u0082two", "three");
        assertArguments("\"one\\\u0083two\"   three", "one\\\u0083two", "three");
        assertArguments("\"one\\\u0084two\"   three", "one\\\u0084two", "three");
        assertArguments("\"one\\\u0085two\"   three", "one\\\u0085two", "three");
        assertArguments("\"one\\\u0086two\"   three", "one\\\u0086two", "three");
        assertArguments("\"one\\\u0087two\"   three", "one\\\u0087two", "three");
        assertArguments("\"one\\\u0088two\"   three", "one\\\u0088two", "three");
        assertArguments("\"one\\\u0089two\"   three", "one\\\u0089two", "three");
        assertArguments("\"one\\\u008atwo\"   three", "one\\\u008atwo", "three");
        assertArguments("\"one\\\u008btwo\"   three", "one\\\u008btwo", "three");
        assertArguments("\"one\\\u008ctwo\"   three", "one\\\u008ctwo", "three");
        assertArguments("\"one\\\u008dtwo\"   three", "one\\\u008dtwo", "three");
        assertArguments("\"one\\\u008etwo\"   three", "one\\\u008etwo", "three");
        assertArguments("\"one\\\u008ftwo\"   three", "one\\\u008ftwo", "three");
        assertArguments("\"one\\\u0090two\"   three", "one\\\u0090two", "three");
        assertArguments("\"one\\\u0091two\"   three", "one\\\u0091two", "three");
        assertArguments("\"one\\\u0092two\"   three", "one\\\u0092two", "three");
        assertArguments("\"one\\\u0093two\"   three", "one\\\u0093two", "three");
        assertArguments("\"one\\\u0094two\"   three", "one\\\u0094two", "three");
        assertArguments("\"one\\\u0095two\"   three", "one\\\u0095two", "three");
        assertArguments("\"one\\\u0096two\"   three", "one\\\u0096two", "three");
        assertArguments("\"one\\\u0097two\"   three", "one\\\u0097two", "three");
        assertArguments("\"one\\\u0098two\"   three", "one\\\u0098two", "three");
        assertArguments("\"one\\\u0099two\"   three", "one\\\u0099two", "three");
        assertArguments("\"one\\\u009atwo\"   three", "one\\\u009atwo", "three");
        assertArguments("\"one\\\u009btwo\"   three", "one\\\u009btwo", "three");
        assertArguments("\"one\\\u009ctwo\"   three", "one\\\u009ctwo", "three");
        assertArguments("\"one\\\u009dtwo\"   three", "one\\\u009dtwo", "three");
        assertArguments("\"one\\\u009etwo\"   three", "one\\\u009etwo", "three");
        assertArguments("\"one\\\u009ftwo\"   three", "one\\\u009ftwo", "three");
        assertArguments("\"one\\\u00a0two\"   three", "one\\\u00a0two", "three");
        assertArguments("\"one\\\u00a1two\"   three", "one\\\u00a1two", "three");
        assertArguments("\"one\\\u00a2two\"   three", "one\\\u00a2two", "three");
        assertArguments("\"one\\\u00a3two\"   three", "one\\\u00a3two", "three");
        assertArguments("\"one\\\u00a4two\"   three", "one\\\u00a4two", "three");
        assertArguments("\"one\\\u00a5two\"   three", "one\\\u00a5two", "three");
        assertArguments("\"one\\\u00a6two\"   three", "one\\\u00a6two", "three");
        assertArguments("\"one\\\u00a7two\"   three", "one\\\u00a7two", "three");
        assertArguments("\"one\\\u00a8two\"   three", "one\\\u00a8two", "three");
        assertArguments("\"one\\\u00a9two\"   three", "one\\\u00a9two", "three");
        assertArguments("\"one\\\u00aatwo\"   three", "one\\\u00aatwo", "three");
        assertArguments("\"one\\\u00abtwo\"   three", "one\\\u00abtwo", "three");
        assertArguments("\"one\\\u00actwo\"   three", "one\\\u00actwo", "three");
        assertArguments("\"one\\\u00adtwo\"   three", "one\\\u00adtwo", "three");
        assertArguments("\"one\\\u00aetwo\"   three", "one\\\u00aetwo", "three");
        assertArguments("\"one\\\u00aftwo\"   three", "one\\\u00aftwo", "three");
        assertArguments("\"one\\\u00b0two\"   three", "one\\\u00b0two", "three");
        assertArguments("\"one\\\u00b1two\"   three", "one\\\u00b1two", "three");
        assertArguments("\"one\\\u00b2two\"   three", "one\\\u00b2two", "three");
        assertArguments("\"one\\\u00b3two\"   three", "one\\\u00b3two", "three");
        assertArguments("\"one\\\u00b4two\"   three", "one\\\u00b4two", "three");
        assertArguments("\"one\\\u00b5two\"   three", "one\\\u00b5two", "three");
        assertArguments("\"one\\\u00b6two\"   three", "one\\\u00b6two", "three");
        assertArguments("\"one\\\u00b7two\"   three", "one\\\u00b7two", "three");
        assertArguments("\"one\\\u00b8two\"   three", "one\\\u00b8two", "three");
        assertArguments("\"one\\\u00b9two\"   three", "one\\\u00b9two", "three");
        assertArguments("\"one\\\u00batwo\"   three", "one\\\u00batwo", "three");
        assertArguments("\"one\\\u00bbtwo\"   three", "one\\\u00bbtwo", "three");
        assertArguments("\"one\\\u00bctwo\"   three", "one\\\u00bctwo", "three");
        assertArguments("\"one\\\u00bdtwo\"   three", "one\\\u00bdtwo", "three");
        assertArguments("\"one\\\u00betwo\"   three", "one\\\u00betwo", "three");
        assertArguments("\"one\\\u00bftwo\"   three", "one\\\u00bftwo", "three");
        assertArguments("\"one\\\u00c0two\"   three", "one\\\u00c0two", "three");
        assertArguments("\"one\\\u00c1two\"   three", "one\\\u00c1two", "three");
        assertArguments("\"one\\\u00c2two\"   three", "one\\\u00c2two", "three");
        assertArguments("\"one\\\u00c3two\"   three", "one\\\u00c3two", "three");
        assertArguments("\"one\\\u00c4two\"   three", "one\\\u00c4two", "three");
        assertArguments("\"one\\\u00c5two\"   three", "one\\\u00c5two", "three");
        assertArguments("\"one\\\u00c6two\"   three", "one\\\u00c6two", "three");
        assertArguments("\"one\\\u00c7two\"   three", "one\\\u00c7two", "three");
        assertArguments("\"one\\\u00c8two\"   three", "one\\\u00c8two", "three");
        assertArguments("\"one\\\u00c9two\"   three", "one\\\u00c9two", "three");
        assertArguments("\"one\\\u00catwo\"   three", "one\\\u00catwo", "three");
        assertArguments("\"one\\\u00cbtwo\"   three", "one\\\u00cbtwo", "three");
        assertArguments("\"one\\\u00cctwo\"   three", "one\\\u00cctwo", "three");
        assertArguments("\"one\\\u00cdtwo\"   three", "one\\\u00cdtwo", "three");
        assertArguments("\"one\\\u00cetwo\"   three", "one\\\u00cetwo", "three");
        assertArguments("\"one\\\u00cftwo\"   three", "one\\\u00cftwo", "three");
        assertArguments("\"one\\\u00d0two\"   three", "one\\\u00d0two", "three");
        assertArguments("\"one\\\u00d1two\"   three", "one\\\u00d1two", "three");
        assertArguments("\"one\\\u00d2two\"   three", "one\\\u00d2two", "three");
        assertArguments("\"one\\\u00d3two\"   three", "one\\\u00d3two", "three");
        assertArguments("\"one\\\u00d4two\"   three", "one\\\u00d4two", "three");
        assertArguments("\"one\\\u00d5two\"   three", "one\\\u00d5two", "three");
        assertArguments("\"one\\\u00d6two\"   three", "one\\\u00d6two", "three");
        assertArguments("\"one\\\u00d7two\"   three", "one\\\u00d7two", "three");
        assertArguments("\"one\\\u00d8two\"   three", "one\\\u00d8two", "three");
        assertArguments("\"one\\\u00d9two\"   three", "one\\\u00d9two", "three");
        assertArguments("\"one\\\u00datwo\"   three", "one\\\u00datwo", "three");
        assertArguments("\"one\\\u00dbtwo\"   three", "one\\\u00dbtwo", "three");
        assertArguments("\"one\\\u00dctwo\"   three", "one\\\u00dctwo", "three");
        assertArguments("\"one\\\u00ddtwo\"   three", "one\\\u00ddtwo", "three");
        assertArguments("\"one\\\u00detwo\"   three", "one\\\u00detwo", "three");
        assertArguments("\"one\\\u00dftwo\"   three", "one\\\u00dftwo", "three");
        assertArguments("\"one\\\u00e0two\"   three", "one\\\u00e0two", "three");
        assertArguments("\"one\\\u00e1two\"   three", "one\\\u00e1two", "three");
        assertArguments("\"one\\\u00e2two\"   three", "one\\\u00e2two", "three");
        assertArguments("\"one\\\u00e3two\"   three", "one\\\u00e3two", "three");
        assertArguments("\"one\\\u00e4two\"   three", "one\\\u00e4two", "three");
        assertArguments("\"one\\\u00e5two\"   three", "one\\\u00e5two", "three");
        assertArguments("\"one\\\u00e6two\"   three", "one\\\u00e6two", "three");
        assertArguments("\"one\\\u00e7two\"   three", "one\\\u00e7two", "three");
        assertArguments("\"one\\\u00e8two\"   three", "one\\\u00e8two", "three");
        assertArguments("\"one\\\u00e9two\"   three", "one\\\u00e9two", "three");
        assertArguments("\"one\\\u00eatwo\"   three", "one\\\u00eatwo", "three");
        assertArguments("\"one\\\u00ebtwo\"   three", "one\\\u00ebtwo", "three");
        assertArguments("\"one\\\u00ectwo\"   three", "one\\\u00ectwo", "three");
        assertArguments("\"one\\\u00edtwo\"   three", "one\\\u00edtwo", "three");
        assertArguments("\"one\\\u00eetwo\"   three", "one\\\u00eetwo", "three");
        assertArguments("\"one\\\u00eftwo\"   three", "one\\\u00eftwo", "three");
        assertArguments("\"one\\\u00f0two\"   three", "one\\\u00f0two", "three");
        assertArguments("\"one\\\u00f1two\"   three", "one\\\u00f1two", "three");
        assertArguments("\"one\\\u00f2two\"   three", "one\\\u00f2two", "three");
        assertArguments("\"one\\\u00f3two\"   three", "one\\\u00f3two", "three");
        assertArguments("\"one\\\u00f4two\"   three", "one\\\u00f4two", "three");
        assertArguments("\"one\\\u00f5two\"   three", "one\\\u00f5two", "three");
        assertArguments("\"one\\\u00f6two\"   three", "one\\\u00f6two", "three");
        assertArguments("\"one\\\u00f7two\"   three", "one\\\u00f7two", "three");
        assertArguments("\"one\\\u00f8two\"   three", "one\\\u00f8two", "three");
        assertArguments("\"one\\\u00f9two\"   three", "one\\\u00f9two", "three");
        assertArguments("\"one\\\u00fatwo\"   three", "one\\\u00fatwo", "three");
        assertArguments("\"one\\\u00fbtwo\"   three", "one\\\u00fbtwo", "three");
        assertArguments("\"one\\\u00fctwo\"   three", "one\\\u00fctwo", "three");
        assertArguments("\"one\\\u00fdtwo\"   three", "one\\\u00fdtwo", "three");
        assertArguments("\"one\\\u00fetwo\"   three", "one\\\u00fetwo", "three");
        assertArguments("\"one\\\u00fftwo\"   three", "one\\\u00fftwo", "three");
    }

    private void assertInvalidArguments(String notParsable) {

    }

}
